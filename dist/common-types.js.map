{"version":3,"sources":["../src/common-types.ts"],"names":[],"mappings":";;AAAA,+BAAkD;AAoDlD;;GAEG;AACH,gBAA2B,SAAQ,iBAAe;IAUhD;QACE,KAAK,EAAE,CAAC;IACV,CAAC;IAVM,MAAM,CAAC,cAAc,CAC1B,YAA6B,EAC7B,KAAS;QAET,MAAM,UAAU,GAAG,YAA6B,CAAC;QACjD,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;QACzB,OAAO,UAAU,CAAC;IACpB,CAAC;CAIF;AAbD,gCAaC","file":"common-types.js","sourcesContent":["import { Observable as RxObservable } from 'rxjs';\nimport { ContractTypes } from './common-enums';\nimport IConfig from './IConfig';\nimport BasicParams from './BasicParams';\nimport KafkaMessageStream from './KafkaMessageStream';\n\n/**\n * @type The type ID represent kafka topic id.\n */\nexport type ID = string;\n/**\n * @type The type DavID represent DAV unique identity string.\n */\nexport type DavID = string;\n/**\n * @type The type BigInteger represent a big number.\n */\nexport type BigInteger = string;\n/**\n * @type The type ContractArtifacts represent the DAV Contracts artifacts that contain ABI and networks addresses.\n */\nexport type ContractsArtifacts = { [T in ContractTypes]: any };\n\n/**\n * @type The Dimensions interface represents dimensions for service, (package dimensions, drone dimensions, vessel dimensions, etc.).\n */\nexport interface IDimensions {\n  length: number;\n  width: number;\n  height: number;\n  weight: number;\n}\n\n/**\n * @type The Location interface represents location which contains Latitude and Longitude.\n */\nexport interface ILocation {\n  lat: number;\n  long: number;\n}\n\nexport interface IKafka {\n  generateTopicId(): string;\n  createTopic(topicId: string, config: IConfig): Promise<void>;\n  sendParams(\n    topicId: string,\n    basicParams: BasicParams,\n    config: IConfig,\n  ): Promise<void>;\n  messages(topicId: string, config: IConfig): Promise<KafkaMessageStream>;\n}\n\n/**\n * @type The type Observable represent the SDK observable object that used to subscribe to Needs/Bids/Messages/etc...\n */\nexport class Observable<T> extends RxObservable<T> {\n  public topic: ID;\n  public static fromObservable<T>(\n    observableRx: RxObservable<T>,\n    topic: ID,\n  ): Observable<T> {\n    const observable = observableRx as Observable<T>;\n    observable.topic = topic;\n    return observable;\n  }\n  private constructor() {\n    super();\n  }\n}\n"]}