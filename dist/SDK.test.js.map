{"version":3,"sources":["../src/SDK.test.ts"],"names":[],"mappings":"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","file":"SDK.test.js","sourcesContent":["import Config from './Config';\nimport Identity from './Identity';\nimport IConfig from './IConfig';\n\ndescribe('SDK class', () => {\n  const config = new Config({}) as IConfig;\n  const davId = 'DAV_ID';\n  const contractsError = { msg: 'WEB3_ERROR' };\n  const contractsMock = {\n    isIdentityRegistered: jest.fn(),\n    registerIdentity: jest.fn(),\n  };\n\n  beforeEach(() => {\n    jest.resetAllMocks();\n    jest.resetModules();\n    jest.doMock('./Contracts', () => ({default: contractsMock}));\n  });\n\n  describe('getIdentity method', () => {\n\n    it('should success, validates identity', async () => {\n      contractsMock.isIdentityRegistered.mockImplementation(() => Promise.resolve(true));\n      // tslint:disable-next-line:no-shadowed-variable\n      const SDK: any = (await import('./SDK')).default;\n      const sdk = new SDK(config);\n      const identity = new Identity('NO_TOPIC', davId, config);\n      await expect(sdk.getIdentity(davId, config)).resolves.toEqual(identity);\n    });\n\n    it('should throw due to unregistered dav id', async () => {\n      contractsMock.isIdentityRegistered.mockImplementation(() => Promise.resolve(false));\n      // tslint:disable-next-line:no-shadowed-variable\n      const SDK: any = (await import('./SDK')).default;\n      const sdk = new SDK(config);\n      await expect(sdk.getIdentity(davId, config)).rejects.toThrow(`${davId} is not a registered identity`);\n    });\n\n    it('should throw due to blockchain exception', async () => {\n      contractsMock.isIdentityRegistered.mockImplementation(() => Promise.reject(contractsError));\n      // tslint:disable-next-line:no-shadowed-variable\n      const SDK: any = (await import('./SDK')).default;\n      const sdk = new SDK(config);\n      await expect(sdk.getIdentity(davId, config)).rejects.toEqual(contractsError);\n    });\n  });\n\n  describe('isRegistered method', () => {\n\n    it('validates registered dav id', async () => {\n      contractsMock.isIdentityRegistered.mockImplementation(() => Promise.resolve(true));\n      // tslint:disable-next-line:no-shadowed-variable\n      const SDK: any = (await import('./SDK')).default;\n      const sdk = new SDK(config);\n      const isRegistered = await sdk.isRegistered('registered dav id');\n      expect(isRegistered).toBe(true);\n    });\n\n    it('validates unregistered dav id', async () => {\n      contractsMock.isIdentityRegistered.mockImplementation(() => Promise.resolve(false));\n      // tslint:disable-next-line:no-shadowed-variable\n      const SDK: any = (await import('./SDK')).default;\n      const sdk = new SDK(config);\n      const isRegistered = await sdk.isRegistered('unregistered dav id');\n      expect(isRegistered).toBe(false);\n    });\n\n    it('should throw due to blockchain exception', async () => {\n      contractsMock.isIdentityRegistered.mockImplementation(() => Promise.reject(contractsError));\n      // tslint:disable-next-line:no-shadowed-variable\n      const SDK: any = (await import('./SDK')).default;\n      const sdk = new SDK(config);\n      await expect(sdk.isRegistered(davId)).rejects.toEqual(contractsError);\n    });\n  });\n\n  describe('registerIdentity method', () => {\n    it('should success, validate web3 mock has been called', async () => {\n      contractsMock.registerIdentity.mockImplementation(() => Promise.resolve('TRANSACTION_HASH'));\n      // tslint:disable-next-line:no-shadowed-variable\n      const SDK: any = (await import('./SDK')).default;\n      const sdk = new SDK(config);\n      await expect(sdk.registerIdentity('davId', 'walletAddress', 'walletPrivateKey', 'identityPrivateKey')).resolves.toEqual('TRANSACTION_HASH');\n    });\n\n    it('should throw due to blockchain exception', async () => {\n      contractsMock.registerIdentity.mockImplementation(() => Promise.reject(contractsError));\n      // tslint:disable-next-line:no-shadowed-variable\n      const SDK: any = (await import('./SDK')).default;\n      const sdk = new SDK(config);\n      await expect(sdk.registerIdentity('davId', 'walletAddress', 'walletPrivateKey', 'identityPrivateKey')).rejects.toEqual(contractsError);\n    });\n  });\n\n});\n"]}