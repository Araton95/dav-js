{"version":3,"sources":["../src/Identity.ts"],"names":[],"mappings":"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","file":"Identity.js","sourcesContent":["import { Observable, DavID, ID } from './common-types';\nimport IConfig from './IConfig';\nimport NeedFilterParams from './NeedFilterParams';\nimport NeedParams from './NeedParams';\nimport BidParams from './BidParams';\nimport MissionParams from './MissionParams';\nimport MessageParams from './MessageParams';\nimport Need from './Need';\nimport Bid from './Bid';\nimport Message from './Message';\nimport Mission from './Mission';\nimport Kafka from './Kafka';\nimport axios from 'axios';\nimport KafkaMessageStream from './KafkaMessageStream';\nimport KafkaMessageFactory, { MessageCategories } from './KafkaMessageFactory';\n/**\n * @class The Identity class represent registered DAV identity instance.\n */\nexport default class Identity {\n  private topics: any = {};\n\n  constructor(public id: ID, public davId: DavID, private _config: IConfig) {\n    /**/\n  }\n\n  private async registerNewTopic() {\n    const topic = Kafka.generateTopicId();\n    try {\n      await Kafka.createTopic(topic, this._config);\n    } catch (err) {\n      // TODO: move this general message to kafka class\n      throw new Error(`Fail to create a topic: ${err}`);\n    }\n    return topic;\n  }\n\n  /**\n   * @method publishNeed Used to create a new need and publish it to the relevant service providers.\n   * @param needParams the need parameters.\n   * @returns the created need.\n   */\n  public async publishNeed<T extends NeedParams>(\n    needParams: T,\n  ): Promise<Need<T>> {\n    const bidsChannelName = await this.registerNewTopic(); // Channel#3\n    needParams.id = bidsChannelName;\n    needParams.davId = this.davId || needParams.davId;\n    try {\n      await axios.post(\n        `${this._config.apiSeedUrls[0]}/publishNeed/${bidsChannelName}`,\n        needParams.serialize(),\n      );\n    } catch (err) {\n      throw new Error(`Fail to publish need: ${err}`);\n    }\n    return new Need<T>(bidsChannelName, needParams, this._config);\n  }\n\n  /**\n   * @method needsForType Used to subscribe for specific needs (filtered by params).\n   * @param needFilterParams the filter parameters.\n   * @returns Observable for needs subscription.\n   */\n  public async needsForType<T extends NeedParams>(\n    needFilterParams: NeedFilterParams,\n  ): Promise<Observable<Need<T>>> {\n    const formattedParams = needFilterParams.serialize();\n    let needTypeTopic = '';\n    if (this.topics[formattedParams.protocol]) {\n      needTypeTopic = this.topics[formattedParams.protocol];\n    } else {\n      needTypeTopic = await this.registerNewTopic();\n      this.topics[formattedParams.protocol] = needTypeTopic;\n      try {\n        await axios.post(\n          `${this._config.apiSeedUrls[0]}/needsForType/${needTypeTopic}`,\n          formattedParams,\n        );\n      } catch (err) {\n        throw new Error(`Needs registration failed: ${err}`);\n      }\n    }\n    const kafkaMessageStream: KafkaMessageStream = await Kafka.messages(\n      needTypeTopic,\n      this._config,\n    ); // Channel#2\n    const needParamsStream: Observable<T> = kafkaMessageStream.filterType(\n      KafkaMessageFactory.instance.getMessageTypes(\n        needFilterParams.protocol,\n        MessageCategories.Need,\n      ),\n    );\n    const observable = Observable.fromObservable(\n      needParamsStream.map(\n        (needParams: T) => new Need<T>(needTypeTopic, needParams, this._config),\n      ),\n      needParamsStream.topic,\n    );\n    return observable;\n  }\n  /**\n   * @method missions Used to subscribe for missions.\n   * @returns Observable for missions subscription.\n   */\n  public async missions<\n    T extends MissionParams,\n    U extends MessageParams\n  >(): Promise<Observable<Mission<T>>> {\n    throw new Error('Not implemented in this version');\n  }\n  /**\n   * @method messages Used to subscribe for messages.\n   * @returns Observable for messages subscription.\n   */\n  public async messages<T extends MessageParams>(): Promise<\n    Observable<Message<T>>\n  > {\n    throw new Error('Not implemented in this version');\n  }\n  /**\n   * @method need Used to restore an existed need.\n   * @param needSelfId The selfId that used to create the bid.\n   * @param params The need parameters.\n   * @returns The restored need.\n   */\n  public need<T extends NeedParams, U extends MessageParams>(\n    needSelfId: ID,\n    params: T,\n  ): Need<T> {\n    return new Need(needSelfId, params, this._config);\n  }\n  /**\n   * @method bid Used to restore an existed bid.\n   * @param bidSelfId The selfId that used to create the bid.\n   * @param params The bid parameters.\n   * @returns The restored bid.\n   */\n  public bid<T extends BidParams, U extends MessageParams>(\n    bidSelfId: ID,\n    params: T,\n  ): Bid<T> {\n    return new Bid(bidSelfId, params, this._config);\n  }\n  /**\n   * @method mission Used to restore an existed mission.\n   * @param missionSelfId The mission self topic ID.\n   * @param missionPeerId The mission peer topic ID.\n   * @param params The mission parameters.\n   * @returns The restored mission.\n   */\n  public mission<T extends MissionParams, U extends MessageParams>(\n    missionSelfId: ID,\n    missionPeerId: ID,\n    params: T,\n  ): Mission<T> {\n    return new Mission(missionSelfId, missionPeerId, params, this._config);\n  }\n}\n"]}