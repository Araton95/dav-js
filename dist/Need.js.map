{"version":3,"sources":["../src/Need.ts"],"names":[],"mappings":";;AAAA,iDAAgD;AAIhD,+BAAwB;AAExB,mCAA4B;AAC5B,uCAAgC;AAGhC,+DAA+E;AAE/E;;GAEG;AACH;IAKE,YACU,OAAW,EACX,OAAU,EACV,OAAgB;QAFhB,YAAO,GAAP,OAAO,CAAI;QACX,YAAO,GAAP,OAAO,CAAG;QACV,YAAO,GAAP,OAAO,CAAS;QAExB,IAAI;IACN,CAAC;IAVD,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAUD;;;;OAIG;IACI,KAAK,CAAC,SAAS,CAAsB,SAAY;QACtD,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,YAAY;QAC9C,MAAM,QAAQ,GAAG,eAAK,CAAC,eAAe,EAAE,CAAC,CAAC,YAAY;QACtD,SAAS,CAAC,EAAE,GAAG,QAAQ,CAAC;QACxB,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;QAC3C,IAAI;YACF,MAAM,eAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACjD;QAAC,OAAO,GAAG,EAAE;YACZ,uDAAuD;YACvD,MAAM,IAAI,KAAK,CAAC,2BAA2B,GAAG,EAAE,CAAC,CAAC;SACnD;QACD,MAAM,GAAG,GAAG,IAAI,aAAG,CACjB,QAAQ,EACR,SAAS,EACT,IAAI,CAAC,OAAO,EACZ,MAAM,eAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAC7C,CAAC;QACF,MAAM,eAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1D,OAAO,GAAG,CAAC;IACb,CAAC;IACD;;;OAGG;IACI,KAAK,CAAC,IAAI;QACf,MAAM,kBAAkB,GAAuB,MAAM,eAAK,CAAC,QAAQ,CACjE,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,OAAO,CACb,CAAC,CAAC,2BAA2B;QAC9B,MAAM,eAAe,GAAG,kBAAkB,CAAC,UAAU,CACnD,6BAAmB,CAAC,QAAQ,CAAC,eAAe,CAC1C,IAAI,CAAC,OAAO,CAAC,QAAQ,EACrB,uCAAiB,CAAC,GAAG,CACtB,CACF,CAAC;QACF,MAAM,SAAS,GAAyB,eAAe,CAAC,GAAG,CACzD,CAAC,SAAY,EAAE,EAAE;YACf,OAAO,IAAI,aAAG,CACZ,IAAI,CAAC,OAAO,EACZ,SAAS,EACT,IAAI,CAAC,OAAO,EACZ,kBAAkB,CACnB,CAAC;QACJ,CAAC,CACF,CAAC;QACF,OAAO,yBAAU,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC/D,CAAC;IACD;;;OAGG;IACI,KAAK,CAAC,WAAW,CAAC,MAAqB;QAC5C,IAAI,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE;YACpC,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;SAChE;QACD,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,YAAY;QAC5C,OAAO,MAAM,eAAK,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY;IACpF,CAAC;IACD;;;;OAIG;IACI,KAAK,CAAC,QAAQ,CACnB,UAAqB;QAErB,MAAM,kBAAkB,GAAuB,MAAM,eAAK,CAAC,QAAQ,CACjE,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,OAAO,CACb,CAAC;QACF,MAAM,mBAAmB,GAAkB,kBAAkB,CAAC,UAAU,CACtE,UAAU;YACR,6BAAmB,CAAC,QAAQ,CAAC,eAAe,CAC1C,IAAI,CAAC,OAAO,CAAC,QAAQ,EACrB,uCAAiB,CAAC,OAAO,CAC1B,CACJ,CAAC;QACF,MAAM,aAAa,GAA6B,mBAAmB,CAAC,GAAG,CACrE,CAAC,MAAS,EAAE,EAAE,CAAC,IAAI,iBAAO,CAAI,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAClE,CAAC;QACF,OAAO,yBAAU,CAAC,cAAc,CAAC,aAAa,EAAE,mBAAmB,CAAC,KAAK,CAAC,CAAC;IAC7E,CAAC;CACF;AApGD,uBAoGC","file":"Need.js","sourcesContent":["import { ID, Observable } from './common-types';\nimport IConfig from './IConfig';\nimport BidParams from './BidParams';\nimport NeedParams from './NeedParams';\nimport Bid from './Bid';\nimport MessageParams from './MessageParams';\nimport Kafka from './Kafka';\nimport Message from './Message';\nimport KafkaMessageStream from './KafkaMessageStream';\nimport { Observable as RxObservable } from 'rxjs';\nimport KafkaMessageFactory, { MessageCategories } from './KafkaMessageFactory';\n\n/**\n * @class The Need class represent a service request.\n */\nexport default class Need<T extends NeedParams> {\n  get params(): T {\n    return this._params;\n  }\n\n  constructor(\n    private _selfId: ID,\n    private _params: T,\n    private _config: IConfig,\n  ) {\n    /**/\n  }\n\n  /**\n   * @method createBid Used to create a new bid for the current need and publish it to the service consumer.\n   * @param bidParams The bid parameters.\n   * @returns The created bid.\n   */\n  public async createBid<V extends BidParams>(bidParams: V): Promise<Bid<V>> {\n    const neederId = this._params.id; // Channel#3\n    const bidderId = Kafka.generateTopicId(); // Channel#6\n    bidParams.id = bidderId;\n    bidParams.neederDavId = this._params.davId;\n    try {\n      await Kafka.createTopic(bidderId, this._config);\n    } catch (err) {\n      // TODO: move this general message to kafka.createTopic\n      throw new Error(`Fail to create a topic: ${err}`);\n    }\n    const bid = new Bid<V>(\n      bidderId,\n      bidParams,\n      this._config,\n      await Kafka.messages(bidderId, this._config),\n    );\n    await Kafka.sendParams(neederId, bidParams, this._config);\n    return bid;\n  }\n  /**\n   * @method bids Used to subscribe for bids for the current need.\n   * @returns Observable for bids subscription.\n   */\n  public async bids<V extends BidParams>(): Promise<Observable<Bid<V>>> {\n    const kafkaMessageStream: KafkaMessageStream = await Kafka.messages(\n      this._selfId,\n      this._config,\n    ); // this._selfId - Channel#3\n    const bidParamsStream = kafkaMessageStream.filterType(\n      KafkaMessageFactory.instance.getMessageTypes(\n        this._params.protocol,\n        MessageCategories.Bid,\n      ),\n    );\n    const bidStream: RxObservable<Bid<V>> = bidParamsStream.map(\n      (bidParams: V) => {\n        return new Bid(\n          this._selfId,\n          bidParams,\n          this._config,\n          kafkaMessageStream,\n        );\n      },\n    );\n    return Observable.fromObservable(bidStream, this._params.id);\n  }\n  /**\n   * @method sendMessage Used to send a message to the service consumer.\n   * @param params The message parameters.\n   */\n  public async sendMessage(params: MessageParams): Promise<void> {\n    if (this._selfId === this._params.id) {\n      throw new Error(`You cannot send message to your own channel`);\n    }\n    params.senderId = this._selfId; // Channel#2\n    return await Kafka.sendParams(this._params.id, params, this._config); // Channel#3\n  }\n  /**\n   * @method messages Used to subscribe for messages for the current need.\n   * @param filterType (optional) array of the expected message params object type.\n   * @returns Observable for messages subscription.\n   */\n  public async messages<U extends MessageParams>(\n    filterType?: string[],\n  ): Promise<Observable<Message<U>>> {\n    const kafkaMessageStream: KafkaMessageStream = await Kafka.messages(\n      this._selfId,\n      this._config,\n    );\n    const messageParamsStream: Observable<U> = kafkaMessageStream.filterType(\n      filterType ||\n        KafkaMessageFactory.instance.getMessageTypes(\n          this._params.protocol,\n          MessageCategories.Message,\n        ),\n    );\n    const messageStream: RxObservable<Message<U>> = messageParamsStream.map(\n      (params: U) => new Message<U>(this._selfId, params, this._config),\n    );\n    return Observable.fromObservable(messageStream, messageParamsStream.topic);\n  }\n}\n"]}