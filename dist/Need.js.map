{"version":3,"sources":["../src/Need.ts"],"names":[],"mappings":";;AAAA,iDAAgD;AAIhD,+BAAwB;AAExB,mCAA4B;AAC5B,uCAAgC;AAIhC;;GAEG;AACH;IAMI,YAAoB,OAAW,EAAU,OAAU,EAAU,OAAgB;QAAzD,YAAO,GAAP,OAAO,CAAI;QAAU,YAAO,GAAP,OAAO,CAAG;QAAU,YAAO,GAAP,OAAO,CAAS;QACzE,IAAI;IACR,CAAC;IAND,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAMD;;;;OAIG;IACI,KAAK,CAAC,SAAS,CAAsB,SAAY;QACpD,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,YAAY;QAC9C,MAAM,QAAQ,GAAG,eAAK,CAAC,eAAe,EAAE,CAAC,CAAC,YAAY;QACtD,SAAS,CAAC,EAAE,GAAG,QAAQ,CAAC;QACxB,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;QAC3C,IAAI;YACA,MAAM,eAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACnD;QAAC,OAAO,GAAG,EAAE;YACV,uDAAuD;YACvD,MAAM,IAAI,KAAK,CAAC,2BAA2B,GAAG,EAAE,CAAC,CAAC;SACrD;QACD,MAAM,GAAG,GAAG,IAAI,aAAG,CAAI,QAAQ,EAAE,SAAS,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,eAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QACxG,MAAM,eAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1D,OAAO,GAAG,CAAC;IACf,CAAC;IACD;;;OAGG;IACI,KAAK,CAAC,IAAI;QACb,MAAM,kBAAkB,GAAuB,MAAM,eAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,2BAA2B;QAC5H,MAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC;QACzD,MAAM,eAAe,GAAG,kBAAkB,CAAC,UAAU,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC/F,MAAM,SAAS,GAAyB,eAAe,CAAC,GAAG,CAAC,CAAC,SAAY,EAAE,EAAE;YACzE,OAAO,IAAI,aAAG,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,OAAO,EAAE,kBAAkB,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;QACH,OAAO,yBAAU,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACjE,CAAC;IACD;;;OAGG;IACI,KAAK,CAAC,WAAW,CAAC,MAAqB;QAC1C,IAAI,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE;YAClC,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;SAClE;QACD,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,YAAY;QAC5C,OAAO,MAAM,eAAK,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY;IACtF,CAAC;IACD;;;;OAIG;IACI,KAAK,CAAC,QAAQ,CAA0B,UAAqB;QAChE,MAAM,kBAAkB,GAAuB,MAAM,eAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAChG,MAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC;QACzD,MAAM,mBAAmB,GAAkB,kBAAkB,CAAC,UAAU,CAAC,gBAAgB,EAAE,UAAU,IAAI,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QACpI,MAAM,aAAa,GAA6B,mBAAmB,CAAC,GAAG,CAAC,CAAC,MAAS,EAAE,EAAE,CAClF,IAAI,iBAAO,CAAI,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QACxD,OAAO,yBAAU,CAAC,cAAc,CAAC,aAAa,EAAE,mBAAmB,CAAC,KAAK,CAAC,CAAC;IAC/E,CAAC;CACJ;AAnED,uBAmEC","file":"Need.js","sourcesContent":["import { ID, Observable } from './common-types';\nimport IConfig from './IConfig';\nimport BidParams from './BidParams';\nimport NeedParams from './NeedParams';\nimport Bid from './Bid';\nimport MessageParams from './MessageParams';\nimport Kafka from './Kafka';\nimport Message from './Message';\nimport KafkaMessageStream from './KafkaMessageStream';\nimport { Observable as RxObservable } from 'rxjs';\n\n/**\n * @class The Need class represent a service request.\n */\nexport default class Need<T extends NeedParams> {\n\n    get params(): T {\n        return this._params;\n    }\n\n    constructor(private _selfId: ID, private _params: T, private _config: IConfig) {\n        /**/\n    }\n\n    /**\n     * @method createBid Used to create a new bid for the current need and publish it to the service consumer.\n     * @param bidParams The bid parameters.\n     * @returns The created bid.\n     */\n    public async createBid<V extends BidParams>(bidParams: V): Promise<Bid<V>> {\n        const neederId = this._params.id; // Channel#3\n        const bidderId = Kafka.generateTopicId(); // Channel#6\n        bidParams.id = bidderId;\n        bidParams.neederDavId = this._params.davId;\n        try {\n            await Kafka.createTopic(bidderId, this._config);\n        } catch (err) {\n            // TODO: move this general message to kafka.createTopic\n            throw new Error(`Fail to create a topic: ${err}`);\n        }\n        const bid = new Bid<V>(bidderId, bidParams, this._config, await Kafka.messages(bidderId, this._config));\n        await Kafka.sendParams(neederId, bidParams, this._config);\n        return bid;\n    }\n    /**\n     * @method bids Used to subscribe for bids for the current need.\n     * @returns Observable for bids subscription.\n     */\n    public async bids<V extends BidParams>(): Promise<Observable<Bid<V>>> {\n        const kafkaMessageStream: KafkaMessageStream = await Kafka.messages(this._selfId, this._config); // this._selfId - Channel#3\n        const protocolTypesMap = this._params.getProtocolTypes();\n        const bidParamsStream = kafkaMessageStream.filterType(protocolTypesMap, protocolTypesMap.bids);\n        const bidStream: RxObservable<Bid<V>> = bidParamsStream.map((bidParams: V) => {\n            return new Bid(this._selfId, bidParams, this._config, kafkaMessageStream);\n        });\n        return Observable.fromObservable(bidStream, this._params.id);\n    }\n    /**\n     * @method sendMessage Used to send a message to the service consumer.\n     * @param params The message parameters.\n     */\n    public async sendMessage(params: MessageParams): Promise<void> {\n        if (this._selfId === this._params.id) {\n            throw new Error(`You cannot send message to your own channel`);\n        }\n        params.senderId = this._selfId; // Channel#2\n        return await Kafka.sendParams(this._params.id, params, this._config); // Channel#3\n    }\n    /**\n     * @method messages Used to subscribe for messages for the current need.\n     * @param filterType (optional) array of the expected message params object type.\n     * @returns Observable for messages subscription.\n     */\n    public async messages<U extends MessageParams>(filterType?: string[]): Promise<Observable<Message<U>>> {\n        const kafkaMessageStream: KafkaMessageStream = await Kafka.messages(this._selfId, this._config);\n        const protocolTypesMap = this._params.getProtocolTypes();\n        const messageParamsStream: Observable<U> = kafkaMessageStream.filterType(protocolTypesMap, filterType || protocolTypesMap.messages);\n        const messageStream: RxObservable<Message<U>> = messageParamsStream.map((params: U) =>\n            new Message<U>(this._selfId, params, this._config));\n        return Observable.fromObservable(messageStream, messageParamsStream.topic);\n    }\n}\n"]}