{"version":3,"sources":["../src/ride-hailing/MessageParams.ts"],"names":[],"mappings":";;AAAA,oDAA2F;AAE3F,mDAA4C;AAY5C;;GAEG;AACH,mBAAmC,SAAQ,uBAAiB;IAexD,YAAY,MAAgC;QACxC,KAAK,CAAC,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC5D,IAAI,CAAC,CAAC,MAAM,EAAE;YACV,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;SAC7C;IACL,CAAC;IAbM,MAAM,CAAC,cAAc;QACxB,OAAO,aAAa,CAAC,KAAK,CAAC;IAC/B,CAAC;IAEM,MAAM,CAAC,kBAAkB;QAC5B,OAAO,aAAa,CAAC,SAAS,CAAC;IACnC,CAAC;IASM,SAAS;QACZ,MAAM,eAAe,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QAC1C,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE;YAC3B,aAAa,EAAE,IAAI,CAAC,aAAa;SACpC,CAAC,CAAC;QACH,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEM,gBAAgB;QACnB,OAAO,uBAAa,CAAC;IACzB,CAAC;IAEM,WAAW,CAAC,IAAS;QACxB,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;IAC5C,CAAC;;AAnCc,uBAAS,GAAG,cAAc,CAAC;AAC3B,mBAAK,GAAG,SAAS,CAAC;AAHrC,gCAsCC","file":"MessageParams.js","sourcesContent":["import BaseMessageParams, { IMessageParams as IBaseMessageParams } from '../MessageParams';\nimport { RideHailingMissionStatus } from '../common-enums';\nimport ProtocolTypes from './ProtocolTypes';\n\n/**\n * @interface IMessageParams extends The base interface IMessageParams for ride hailing protocol for all messages except OnTheWay message.\n */\ninterface IMessageParams extends IBaseMessageParams {\n    /**\n     * @property Last mission status.\n     */\n    missionStatus: RideHailingMissionStatus;\n}\n\n/**\n * @class The Class ride-hailing/MessageParams represent the parameters of ride-hailing message for all messages except OnTheWay message.\n */\nexport default class MessageParams extends BaseMessageParams {\n\n    private static _protocol = 'ride_hailing';\n    private static _type = 'message';\n\n    public missionStatus: RideHailingMissionStatus;\n\n    public static getMessageType(): string {\n        return MessageParams._type;\n    }\n\n    public static getMessageProtocol(): string {\n        return MessageParams._protocol;\n    }\n\n    constructor(values?: Partial<IMessageParams>) {\n        super(MessageParams._protocol, MessageParams._type, values);\n        if (!!values) {\n            this.missionStatus = values.missionStatus;\n        }\n    }\n\n    public serialize() {\n        const formattedParams = super.serialize();\n        Object.assign(formattedParams, {\n            missionStatus: this.missionStatus,\n        });\n        return formattedParams;\n    }\n\n    public getProtocolTypes() {\n        return ProtocolTypes;\n    }\n\n    public deserialize(json: any): void {\n        super.deserialize(json);\n        this.missionStatus = json.missionStatus;\n    }\n}\n"]}