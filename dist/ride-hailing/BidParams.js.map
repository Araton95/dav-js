{"version":3,"sources":["../src/ride-hailing/BidParams.ts"],"names":[],"mappings":";;AAAA,4CAAyC;AAEzC,mDAA4C;AA6C5C;;GAEG;AACH,eAA+B,SAAQ,mBAAa;IA0BhD,YAAY,MAA4B;QACpC,IAAI,CAAC,MAAM,EAAE;YACT,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;SAC/C;aAAM;YACH,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YACpD,oCAAoC;YACpC,IAAI,CAAC,sBAAsB,GAAG,MAAM,CAAC,sBAAsB,CAAC;YAC5D,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;YAC9B,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;SACvC;IACL,CAAC;IAlBM,MAAM,CAAC,cAAc;QACxB,OAAO,SAAS,CAAC,KAAK,CAAC;IAC3B,CAAC;IAEM,MAAM,CAAC,kBAAkB;QAC5B,OAAO,SAAS,CAAC,SAAS,CAAC;IAC/B,CAAC;IAcM,SAAS;QACZ,MAAM,eAAe,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QAC1C,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE;YAC3B,sBAAsB,EAAE,IAAI,CAAC,sBAAsB;YACnD,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,UAAU,EAAE,IAAI,CAAC,UAAU;SAC9B,CAAC,CAAC;QACH,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEM,WAAW,CAAC,IAAS;QACxB,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC;QAC1D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;IACtC,CAAC;IAEM,MAAM,CAAC,KAAgB;QAC1B,OAAO,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACzD,CAAC;IAEM,gBAAgB;QACnB,OAAO,uBAAa,CAAC;IACzB,CAAC;;AA3Dc,mBAAS,GAAG,cAAc,CAAC;AAC3B,eAAK,GAAG,KAAK,CAAC;AAHjC,4BA8DC","file":"BidParams.js","sourcesContent":["import BaseBidParams from '../BidParams';\nimport IBaseBidParams from '../IBidParams';\nimport ProtocolTypes from './ProtocolTypes';\n\n/**\n * @interface IVehicleDetails is represents vehicle details in a bid of ride-hailing protocol\n */\ninterface IVehicleDetails {\n    /**\n     * @property The vehicle's type.\n     */\n    type: string;\n    /**\n     * @property The vehicle's manufacturer.\n     */\n    manufacturer: string;\n    /**\n     * @property The vehicle's model.\n     */\n    model: string;\n    /**\n     * @property The vehicle's color.\n     */\n    color: string;\n    /**\n     * @property The vehicle's license plate.\n     */\n    licensePlate: string;\n}\n\n/**\n * @interface IBidParams The interface ride-hailing/IBidParams represent a valid argument of ride-hailing/BidParams constructor.\n */\ninterface IBidParams extends IBaseBidParams {\n    /**\n     * @property The provider's vehicle current location (required).\n     */\n    currentVehicleLocation: Location;\n    /**\n     * @property The vehicle details.\n     */\n    vehicle: IVehicleDetails;\n    /**\n     * @property The driver name.\n     */\n    driverName: string;\n}\n/**\n * @class The Class ride-hailing/BidParams represent the parameters of ride-hailing bid.\n */\nexport default class BidParams extends BaseBidParams {\n\n    private static _protocol = 'ride_hailing';\n    private static _type = 'bid';\n\n    /**\n     * @property The provider's vehicle current location.\n     */\n    public currentVehicleLocation: Location;\n    /**\n     * @property The vehicle details.\n     */\n    public vehicle: IVehicleDetails;\n    /**\n     * @property The driver name.\n     */\n    public driverName: string;\n\n    public static getMessageType(): string {\n        return BidParams._type;\n    }\n\n    public static getMessageProtocol(): string {\n        return BidParams._protocol;\n    }\n\n    constructor(values?: Partial<IBidParams>) {\n        if (!values) {\n            super(BidParams._protocol, BidParams._type);\n        } else {\n            super(BidParams._protocol, BidParams._type, values);\n            // TODO: throw if not enough details\n            this.currentVehicleLocation = values.currentVehicleLocation;\n            this.vehicle = values.vehicle;\n            this.driverName = values.driverName;\n        }\n    }\n\n    public serialize() {\n        const formattedParams = super.serialize();\n        Object.assign(formattedParams, {\n            currentVehicleLocation: this.currentVehicleLocation,\n            vehicle: this.vehicle,\n            driverName: this.driverName,\n        });\n        return formattedParams;\n    }\n\n    public deserialize(json: any): void {\n        super.deserialize(json);\n        this.currentVehicleLocation = json.currentVehicleLocation;\n        this.vehicle = json.vehicle;\n        this.driverName = json.driverName;\n    }\n\n    public equals(other: BidParams): boolean {\n        return this.ttl === other.ttl && super.equals(other);\n    }\n\n    public getProtocolTypes() {\n        return ProtocolTypes;\n    }\n}\n"]}