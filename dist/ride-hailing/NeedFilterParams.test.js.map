{"version":3,"sources":["../src/ride-hailing/NeedFilterParams.test.ts"],"names":[],"mappings":";;AAAA,yDAAkD;AAElD,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,MAAM,gBAAgB,GAAG,IAAI,0BAAgB,CAAC;QAC5C,QAAQ,EAAE;YACR,GAAG,EAAE,SAAS;YACd,IAAI,EAAE,SAAS;SAChB;QACD,MAAM,EAAE,IAAI;KACb,CAAC,CAAC;IACH,gBAAgB,CAAC,KAAK,GAAG,OAAO,CAAC;IACjC,MAAM,0BAA0B,GAAQ;QACtC,GAAG,EAAE,SAAS;QACd,QAAQ,EAAE,cAAc;QACxB,IAAI,EAAE,aAAa;QACnB,IAAI,EAAE;YACJ,GAAG,EAAE;gBACH,QAAQ,EAAE,UAAU,CAAC,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACpD,SAAS,EAAE,UAAU,CAAC,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;aACtD;YACD,GAAG,EAAE;gBACH,QAAQ,EAAE,UAAU,CAAC,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACpD,SAAS,EAAE,UAAU,CAAC,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;aACtD;SACF;QACD,KAAK,EAAE,OAAO;KACf,CAAC;IAEF,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,qEAAqE,EAAE,GAAG,EAAE;YAC7E,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,+DAA+D,EAAE,GAAG,EAAE;YACvE,MAAM,gBAAgB,GAAG,IAAI,0BAAgB,EAAE,CAAC;YAChD,gBAAgB,CAAC,WAAW,CAAC,0BAA0B,CAAC,CAAC;YACzD,MAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"NeedFilterParams.test.js","sourcesContent":["import NeedFilterParams from './NeedFilterParams';\n\ndescribe('NeedFilterParams class', () => {\n  const needFilterParams = new NeedFilterParams({\n    location: {\n      lat: 32.050382,\n      long: 34.766149,\n    },\n    radius: 2000,\n  });\n  needFilterParams.davId = 'davId';\n  const serializedNeedFilterParams: any = {\n    ttl: undefined,\n    protocol: 'ride_hailing',\n    type: 'need_filter',\n    area: {\n      max: {\n        latitude: parseFloat((32.06836666390769).toFixed(6)),\n        longitude: parseFloat((34.78737405278662).toFixed(6)),\n      },\n      min: {\n        latitude: parseFloat((32.03239380095659).toFixed(6)),\n        longitude: parseFloat((34.74493228891106).toFixed(6)),\n      },\n    },\n    davId: 'davId',\n  };\n\n  describe('serialize method', () => {\n    it('should return serialized need params object with the current values', () => {\n      expect(needFilterParams.serialize()).toEqual(serializedNeedFilterParams);\n    });\n  });\n\n  describe('deserialize method', () => {\n    it('should return NeedParams instance with the current parameters', () => {\n      const needParamsObject = new NeedFilterParams();\n      needParamsObject.deserialize(serializedNeedFilterParams);\n      expect(needParamsObject).toEqual(needFilterParams);\n    });\n  });\n});\n"]}