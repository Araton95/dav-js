{"version":3,"sources":["../src/Mission.ts"],"names":[],"mappings":"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","file":"Mission.js","sourcesContent":["import { ID, Observable, DavID } from './common-types';\nimport { TransactionReceipt } from 'web3/types';\nimport IConfig from './IConfig';\nimport Message from './Message';\nimport MessageParams from './MessageParams';\nimport MissionPeerIdMessageParams from './MissionPeerIdMessageParams';\nimport MissionParams from './MissionParams';\nimport Contracts from './Contracts';\nimport Kafka from './Kafka';\nimport KafkaMessageStream from './KafkaMessageStream';\nimport KafkaMessageFactory, { MessageCategories } from './KafkaMessageFactory';\n/**\n * @class Mission class represent an approved mission.\n */\nexport default class Mission<T extends MissionParams> {\n\n    public get params(): T {\n        return this._params;\n    }\n\n    public get id(): ID {\n        return this._selfId;\n    }\n\n    public get peerId(): ID {\n        return this._peerId;\n    }\n\n    constructor(private _selfId: ID, private _peerId: ID, private _params: T, private _config: IConfig) {\n    }\n\n    private async getPeerId(): Promise<ID> {\n        const kafkaMessageStream: KafkaMessageStream = await Kafka.messages(this._selfId, this._config); // Channel#4 or Channel#6\n        const messageParamsStream = kafkaMessageStream.filterType(\n            KafkaMessageFactory.instance.getMessageTypes(MissionPeerIdMessageParams._protocol, MessageCategories.Message));\n        const messageStream = messageParamsStream.do((messageParams: MissionPeerIdMessageParams) => {\n            this._peerId = messageParams.senderId;\n        }).map((messageParams: MissionPeerIdMessageParams) => messageParams.senderId).first().toPromise();\n        return messageStream;\n    }\n\n    /**\n     * @method signContract Used to transfer tokens to the basicMission contract in order to start the mission.\n     * @param walletPrivateKey Ethereum wallet private key, to charge for the mission.\n     * @returns Ethereum transaction receipt.\n     */\n    public async signContract(walletPrivateKey: string): Promise<TransactionReceipt> {\n        try {\n            const transactionReceipt = await Contracts.startMission(this._params.id, this._params.neederDavId, walletPrivateKey,\n                this._params.vehicleId, this._params.price, this._config);\n            return transactionReceipt;\n        } catch (err) {\n            throw new Error(`Fail to sign contract ${err}`);\n        }\n    }\n    /**\n     * @method finalizeMission Used to approve the mission is completed,\n     * and transfer the tokens from the basicMission contract to the service provider.\n     * @param walletPrivateKey Ethereum wallet private key, to charge for the mission.\n     * @returns Ethereum transaction receipt object.\n     */\n    public async finalizeMission(walletPrivateKey: string): Promise<TransactionReceipt> {\n        try {\n            const transactionReceipt = await Contracts.finalizeMission(this._params.id, this._params.neederDavId, walletPrivateKey, this._config);\n            return transactionReceipt;\n        } catch (err) {\n            throw new Error(`Fail to finalize mission ${err}`);\n        }\n    }\n    /**\n     * @method sendMessage Used to send message to the service consumer.\n     * @param params message parameters.\n     */\n    public async sendMessage(params: MessageParams): Promise<void> {\n        if (!this._peerId) {\n            await this.getPeerId();\n        }\n        params.senderId = this._selfId;\n        return await Kafka.sendParams(this._peerId, params, this._config); // Channel#4\n    }\n    /**\n     * @method messages Used to subscribe for messages from the service provider.\n     * @param filterType (optional) array of the expected message params object type.\n     * @returns Observable object.\n     */\n    public async messages<U extends MessageParams>(filterType?: string[]): Promise<Observable<Message<MessageParams>>> {\n        const kafkaMessageStream: KafkaMessageStream = await Kafka.messages(this._selfId, this._config); // Channel#4 or Channel#6\n        const messageParamsStream: Observable<U> = kafkaMessageStream.filterType(filterType ||\n            KafkaMessageFactory.instance.getMessageTypes(this._params.protocol, MessageCategories.Message));\n        const messageStream = messageParamsStream.map((params: U) => new Message<U>(this._selfId, params, this._config));\n        return Observable.fromObservable(messageStream, messageParamsStream.topic);\n    }\n}\n"]}