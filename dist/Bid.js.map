{"version":3,"sources":["../src/Bid.ts"],"names":[],"mappings":"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","file":"Bid.js","sourcesContent":["import { ID, Observable } from './common-types';\nimport IConfig from './IConfig';\nimport BidParams from './BidParams';\nimport MissionParams from './MissionParams';\nimport GeneralMessageParams from './MissionPeerIdMessageParams';\nimport MessageParams from './MessageParams';\nimport Message from './Message';\nimport Mission from './Mission';\nimport Kafka from './Kafka';\nimport Contracts from './Contracts';\nimport KafkaMessageStream from './KafkaMessageStream';\nimport CommitmentConfirmationParams from './CommitmentConfirmationParams';\nimport CommitmentRequest from './CommitmentRequest';\nimport CommitmentConfirmation from './CommitmentConfirmation';\nimport CommitmentRequestParams from './CommitmentRequestParams';\nimport KafkaMessageFactory, { MessageCategories } from './KafkaMessageFactory';\n/**\n * @class Bid class represent a bid for service request.\n */\nexport default class Bid<T extends BidParams> {\n\n    private _missionId: ID;\n    // DON'T USE THIS MEMBER BUT ONLY VIA ITS GETTER!\n    private _kafkaMessageStream: KafkaMessageStream;\n\n    get params(): T {\n        return this._params;\n    }\n\n    get id(): ID {\n        return this._selfId;\n    }\n\n    constructor(private _selfId: ID, private _params: T, private _config: IConfig, private kafkaMessageStream?: KafkaMessageStream) {\n        this._kafkaMessageStream = kafkaMessageStream;\n    }\n\n    private async getKafkaMessageStream(): Promise<KafkaMessageStream> {\n        if (!this._kafkaMessageStream) {\n            this._kafkaMessageStream = await Kafka.messages(this._selfId, this._config);\n        }\n        return this._kafkaMessageStream;\n    }\n\n    public async requestCommitment(): Promise<CommitmentConfirmation> {\n        if (this._params.isCommitted) {\n            return new CommitmentConfirmation(new CommitmentConfirmationParams({ bidId: this._params.id }));\n        }\n        const bidderId = this._params.id; // Channel#6\n        const commitmentRequestParams = new CommitmentRequestParams({ neederId: this._selfId });\n        const kafkaMessageStream: KafkaMessageStream = await this.getKafkaMessageStream(); // Channel#3\n        const commitmentConfirmationParamsStream = kafkaMessageStream.filterType([CommitmentConfirmationParams._messageType]);\n        const commitmentConfirmation = commitmentConfirmationParamsStream.filter(\n            (commitmentConfirmationParams: CommitmentConfirmationParams) => commitmentConfirmationParams.bidId === this._params.id)\n            .map((commitmentParams: CommitmentConfirmationParams) => {\n                this._params.isCommitted = true;\n                return new CommitmentConfirmation(commitmentParams);\n            }).first().toPromise();\n        await Kafka.sendParams(bidderId, commitmentRequestParams, this._config);\n        return commitmentConfirmation;\n    }\n\n    /**\n     * @method accept Used to accept a bid and create a new mission, the mission will sent to the bid provider.\n     * @param missionParams the mission parameters.\n     * @param walletPrivateKey Ethereum wallet private key, to charge for the mission.\n     * @returns the created mission.\n     */\n    // TODO: think why do mission params is a parameter of this method? does mission params have another source of information except bid params?\n    public async accept<V extends MissionParams>(missionParams: V, walletPrivateKey: string): Promise<Mission<V>> {\n        if (!this._params.isCommitted) {\n            throw new Error(`Bidder hasn't confirmed commitment to this bid! please get commitment confirmation first.`);\n        }\n        const bidderId = this._params.id; // Channel#6\n        missionParams.id = Contracts.generateMissionId(this._config); // Channel#4\n        missionParams.price = this._params.price;\n        missionParams.neederDavId = this._params.neederDavId;\n        missionParams.vehicleId = this._params.vehicleId;\n        this._missionId = missionParams.id;\n        try {\n            await Contracts.approveMission(missionParams.neederDavId, walletPrivateKey, this._config);\n        } catch (err) {\n            throw new Error(`Fail to approve mission, you might not have enough DAV Tokens: ${err}`);\n        }\n        try {\n            await Kafka.createTopic(missionParams.id, this._config);\n        } catch (err) {\n            // TODO: move this general message to kafka.createTopic\n            throw new Error(`Fail to create a topic: ${err}`);\n        }\n        await Kafka.sendParams(bidderId, missionParams, this._config);\n        const mission = new Mission<V>(this._missionId, null, missionParams, this._config);\n        return mission;\n    }\n    /**\n     * @method sendMessage Used to send a message to the bid provider.\n     * @param messageParams the message parameters.\n     */\n    public async sendMessage(messageParams: MessageParams): Promise<void> {\n        if (this._selfId === this._params.id) {\n            throw new Error(`You cannot send message to your own channel`);\n        }\n        messageParams.senderId = this._selfId; // Channel#3\n        return await Kafka.sendParams(this._params.id, messageParams, this._config); // Channel#6\n    }\n    /**\n     * @method messages Used to subscribe for messages for the current bid.\n     * @param filterTypes (optional) array of the expected message params object type.\n     * @returns Observable for messages subscription.\n     */\n    public async messages<U extends MessageParams>(filterTypes?: string[]): Promise<Observable<Message<U>>> {\n        const kafkaMessageStream: KafkaMessageStream = await this.getKafkaMessageStream(); // Channel#6 or Channel#3\n        const messageParamsStream: Observable<U> = kafkaMessageStream.filterType(filterTypes ||\n            KafkaMessageFactory.instance.getMessageTypes(this._params.protocol, MessageCategories.Message));\n        const messageStream = messageParamsStream.map((params: U) =>\n            new Message<U>(this._selfId, params, this._config));\n        return Observable.fromObservable(messageStream, messageParamsStream.topic);\n    }\n    /**\n     * @method missions Used to subscribe for missions.\n     * @returns Observable for missions subscription.\n     */\n    public async missions<V extends MissionParams>(): Promise<Observable<Mission<V>>> {\n        const kafkaMessageStream: KafkaMessageStream = await this.getKafkaMessageStream(); // Channel#6\n        const missionParamsStream: Observable<V> = kafkaMessageStream.filterType(\n            KafkaMessageFactory.instance.getMessageTypes(this._params.protocol, MessageCategories.Mission));\n        const missionStream = missionParamsStream\n            .map(async (params: V) => {\n                this._missionId = Kafka.generateTopicId();\n                await Kafka.createTopic(this._missionId, this._config); // Channel #5\n                return new Mission<V>(this._missionId, params.id, params, this._config);\n            })\n            .map(promise => Observable.fromPromise(promise))\n            .mergeAll()\n            .do(mission => {\n                const message = new GeneralMessageParams({ senderId: this._missionId });\n                mission.sendMessage(message);\n            });\n        return Observable.fromObservable(missionStream, missionParamsStream.topic);\n    }\n\n    /**\n     * @method commitmentRequests Used to subscribe for commitmentRequests for current bid.\n     * @returns Observable of commitmentRequests.\n     */\n    public async commitmentRequests(): Promise<Observable<CommitmentRequest>> {\n        const kafkaMessageStream: KafkaMessageStream = await this.getKafkaMessageStream(); // Channel#6\n        const commitmentRequestParamsStream: Observable<CommitmentRequestParams> =\n            kafkaMessageStream.filterType([CommitmentRequestParams._messageType]);\n        const commitmentRequestStream = commitmentRequestParamsStream.map(\n            commitmentRequestParams => new CommitmentRequest(this._selfId, commitmentRequestParams, this._config));\n        return Observable.fromObservable(commitmentRequestStream, this._selfId);\n    }\n}\n"]}