{"version":3,"sources":["../src/KafkaApi.ts"],"names":[],"mappings":"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","file":"KafkaApi.js","sourcesContent":["import KafkaBase from './KafkaBase';\nimport IConfig from './IConfig';\nimport axios from 'axios';\nimport BasicParams from './BasicParams';\nimport { Observable, IKafka } from './common-types';\nimport { Observer } from 'rxjs';\nimport KafkaMessageStream, { IKafkaMessage } from './KafkaMessageStream';\n\nexport default class Kafka extends KafkaBase implements IKafka {\n  public async createTopic(topicId: string, config: IConfig): Promise<void> {\n    // TODO: make sure what is the correct way to use api seed url\n    const fullEndpoint = `http://${\n      config.apiSeedUrls[0]\n    }/topic/create/${topicId}`;\n    const response = await axios.post(fullEndpoint);\n    if (response.status === 200) {\n      return Promise.resolve();\n    }\n    return Promise.reject(response.data.error);\n  }\n\n  public async sendParams(\n    topicId: string,\n    basicParams: BasicParams,\n    config: IConfig,\n  ): Promise<void> {\n    // TODO: make sure what is the correct way to use api seed url\n    const fullEndpoint = `http://${\n      config.apiSeedUrls[0]\n    }/topic/publish/${topicId}`;\n    try {\n      const response = await axios.post(\n        fullEndpoint,\n        JSON.stringify(basicParams.serialize()),\n        { headers: { 'Content-Type': 'application/json' } },\n      );\n      if (response.status === 200) {\n        return Promise.resolve();\n      }\n      return Promise.reject(response.data.error);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  public async messages(\n    topicId: string,\n    config: IConfig,\n  ): Promise<KafkaMessageStream> {\n    if (!config.kafkaBrowserRequestTimeout) {\n      config.kafkaBrowserRequestTimeout = 500;\n    }\n    if (!config.kafkaBrowserPollingInterval) {\n      config.kafkaBrowserPollingInterval = 1000;\n    }\n    // TODO: make sure what is the correct way to use api seed url\n    const messagesUrl = `http://${\n      config.apiSeedUrls[0]\n    }/topic/consume/${topicId}?timeout=${config.kafkaBrowserRequestTimeout}`;\n    const kafkaStream: Observable<IKafkaMessage> = Observable.create(\n      (observer: Observer<IKafkaMessage>) => {\n        const sendRequest = async () => {\n          try {\n            const messages = await axios.get(messagesUrl);\n            if (messages.status !== 200) {\n              observer.error(messages.data.error);\n              return;\n            }\n            messages.data.forEach((message: string) => {\n              const messageString = JSON.parse(message);\n              observer.next({\n                protocol: messageString.protocol,\n                type: messageString.type,\n                contents: message,\n              });\n            });\n          } catch (error) {\n            observer.error(error);\n          }\n        };\n        sendRequest();\n        // TODO: set ttl\n        Observable.interval(config.kafkaBrowserPollingInterval).map(() =>\n          sendRequest(),\n        );\n      },\n    );\n    return new KafkaMessageStream(kafkaStream);\n  }\n}\n"]}