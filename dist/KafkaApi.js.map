{"version":3,"sources":["../src/KafkaApi.ts"],"names":[],"mappings":"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","file":"KafkaApi.js","sourcesContent":["import KafkaBase from './KafkaBase';\nimport IConfig from './IConfig';\nimport axios from 'axios';\nimport BasicParams from './BasicParams';\nimport { Observable, IKafka } from './common-types';\nimport { Observer } from 'rxjs';\nimport KafkaMessageStream, { IKafkaMessage } from './KafkaMessageStream';\n\nexport default class Kafka extends KafkaBase implements IKafka {\n\n    public async createTopic(topicId: string, config: IConfig): Promise<void> {\n        // TODO: make sure what is the correct way to use api seed url\n        const fullEndpoint = `http://${config.apiSeedUrls[0]}/topic/create/${topicId}`;\n        const response = await axios.post(fullEndpoint);\n        if (response.status === 200) {\n            return Promise.resolve();\n        }\n        return Promise.reject(response.data.error);\n    }\n\n    public async sendParams(topicId: string, basicParams: BasicParams, config: IConfig): Promise<void> {\n        // TODO: make sure what is the correct way to use api seed url\n        const fullEndpoint = `http://${config.apiSeedUrls[0]}/topic/publish/${topicId}`;\n        try {\n            const response = await axios.post(fullEndpoint, JSON.stringify(basicParams.serialize()), {headers: {'Content-Type': 'application/json'}});\n            if (response.status === 200) {\n                return Promise.resolve();\n            }\n            return Promise.reject(response.data.error);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\n    public async messages(topicId: string, config: IConfig): Promise<KafkaMessageStream> {\n        if (!config.kafkaBrowserRequestTimeout) {\n            config.kafkaBrowserRequestTimeout = 500;\n        }\n        if (!config.kafkaBrowserPollingInterval) {\n            config.kafkaBrowserPollingInterval = 1000;\n        }\n        // TODO: make sure what is the correct way to use api seed url\n        const messagesUrl = `http://${config.apiSeedUrls[0]}/topic/consume/${topicId}?timeout=${config.kafkaBrowserRequestTimeout}`;\n        const kafkaStream: Observable<IKafkaMessage> =  Observable.create((observer: Observer<IKafkaMessage>) => {\n            const sendRequest = async () => {\n                try {\n                    const messages = await axios.get(messagesUrl);\n                    if (messages.status !== 200) {\n                        observer.error(messages.data.error);\n                        return;\n                    }\n                    messages.data.forEach((message: string) => {\n                        const messageString = JSON.parse(message);\n                        observer.next({\n                            protocol: messageString.protocol,\n                            type: messageString.type,\n                            contents: message,\n                        });\n                    });\n                } catch (error) {\n                    observer.error(error);\n                }\n            };\n            sendRequest();\n            // TODO: set ttl\n            Observable.interval(config.kafkaBrowserPollingInterval).map(() => sendRequest());\n        });\n        return new KafkaMessageStream(kafkaStream);\n    }\n}\n"]}