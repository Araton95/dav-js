{"version":3,"sources":["../src/drone-charging/BidParams.ts"],"names":[],"mappings":";;AAAA,4CAAyC;AAYzC;;GAEG;AACH,eAA+B,SAAQ,mBAAa;IAiBlD,YAAY,MAA4B;QACtC,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACpD,IAAI,CAAC,CAAC,MAAM,EAAE;YACZ,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;SACjC;IACH,CAAC;IAbM,MAAM,CAAC,cAAc;QAC1B,OAAO,SAAS,CAAC,KAAK,CAAC;IACzB,CAAC;IAEM,MAAM,CAAC,kBAAkB;QAC9B,OAAO,SAAS,CAAC,SAAS,CAAC;IAC7B,CAAC;IASM,SAAS;QACd,MAAM,eAAe,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QAC1C,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CAAC,CAAC;QACH,OAAO,eAAe,CAAC;IACzB,CAAC;IAEM,WAAW,CAAC,IAAS;QAC1B,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IAChC,CAAC;IAEM,MAAM,CAAC,KAAgB;QAC5B,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,QAAQ,CAAC;IACjE,CAAC;;AAtCc,mBAAS,GAAG,gBAAgB,CAAC;AAC7B,eAAK,GAAG,KAAK,CAAC;AAF/B,4BAwCC","file":"BidParams.js","sourcesContent":["import BaseBidParams from '../BidParams';\nimport IBaseBidParams from '../IBidParams';\n\n/**\n * @interface IBidParams The interface drone-charging/IBidParams represent a valid argument of drone-charging/BidParams constructor.\n */\ninterface IBidParams extends IBaseBidParams {\n  /**\n   * @property The drone charging plug type.\n   */\n  plugType: string;\n}\n/**\n * @class The Class drone-charging/BidParams represent the parameters of drone-charging bid.\n */\nexport default class BidParams extends BaseBidParams {\n  private static _protocol = 'drone_charging';\n  private static _type = 'bid';\n\n  /**\n   * @property The drone charging plug type.\n   */\n  public plugType: string;\n\n  public static getMessageType(): string {\n    return BidParams._type;\n  }\n\n  public static getMessageProtocol(): string {\n    return BidParams._protocol;\n  }\n\n  constructor(values?: Partial<IBidParams>) {\n    super(BidParams._protocol, BidParams._type, values);\n    if (!!values) {\n      this.plugType = values.plugType;\n    }\n  }\n\n  public serialize() {\n    const formattedParams = super.serialize();\n    Object.assign(formattedParams, {\n      plugType: this.plugType,\n    });\n    return formattedParams;\n  }\n\n  public deserialize(json: any): void {\n    super.deserialize(json);\n    this.plugType = json.plugType;\n  }\n\n  public equals(other: BidParams): boolean {\n    return super.equals(other) && this.plugType === other.plugType;\n  }\n}\n"]}