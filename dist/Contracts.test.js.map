{"version":3,"sources":["../src/Contracts.test.ts"],"names":[],"mappings":"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","file":"Contracts.test.js","sourcesContent":["import Config from './Config';\nimport { ContractTypes } from './common-enums';\n\ndescribe('Contracts class', () => {\n\n  // tslint:disable:max-classes-per-file\n  class Contract {\n    public static methods: any;\n    public get methods(): any { return Contract.methods; }\n    public static getPastEvents: any;\n    public get getPastEvents(): any { return Contract.getPastEvents; }\n  }\n\n  class Accounts {\n    public static privateKeyToAccount: any;\n    public get privateKeyToAccount(): any { return Accounts.privateKeyToAccount; }\n    public static signTransaction: any;\n    public get signTransaction(): any { return Accounts.signTransaction; }\n}\n\n  class HttpProvider {\n  }\n\n  class Web3Mock {\n    public static providers = { HttpProvider };\n    public static eth = { Contract, accounts: Accounts, getGasPrice: () => 1 };\n    public get eth(): any { return Web3Mock.eth; }\n    public utils = {\n      sha3: (x: any) => x,\n    };\n  }\n\n  const configuration = new Config({});\n  const transactionReceipt = { transactionHash: 'TRANSACTION_HASH' };\n  const web3Error = { msg: 'WEB3_ERROR' };\n  const signedTransaction = { rawTransaction: 'RAW_TRANSACTION' };\n  const REGISTERED_IDENTITY = 'REGISTERED_IDENTITY';\n  const UNREGISTERED_IDENTITY = 'UNREGISTERED_IDENTITY';\n  const WALLET_PRIVATE_KEY = 'WALLET_PRIVET_KEY';\n  const IDENTITY_PRIVATE_KEY = 'IDENTITY_PRIVET_KEY';\n  const WALLET_ADDRESS = 'WALLET_ADDRESS';\n  const VEHICLE_ID = 'VEHICLE_ID';\n  const MISSION_ID = 'MISSION_ID';\n  const MISSION_PRICE = '1000000';\n\n  const forContextSwitch = () => {\n    return new Promise((resolve, reject) => {\n      jest.useRealTimers();\n      setTimeout(resolve, 0);\n      jest.useFakeTimers();\n    });\n  };\n\n  beforeAll(() => { /**/ });\n\n  describe('isIdentityRegistered method', () => {\n\n    const isRegisteredCall = jest.fn(() => true);\n    const isRegistered = jest.fn(() => ({\n      call: isRegisteredCall,\n    }));\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    beforeAll(() => {\n      jest.doMock('web3', () => Web3Mock);\n      const web3 = require('web3');\n      web3.eth.Contract.methods = { isRegistered };\n    });\n\n    it('should call relevant functions and return true for registered Id', async () => {\n      const contracts: any = (await import('./Contracts')).default;\n      await expect(contracts.isIdentityRegistered(REGISTERED_IDENTITY, configuration)).resolves.toBe(true);\n      expect(isRegistered).toHaveBeenCalled();\n    });\n\n    it('should call relevant functions and return false for unregistered Id', async () => {\n      isRegisteredCall.mockImplementation(() => false);\n      const contracts: any = (await import('./Contracts')).default;\n      await expect(contracts.isIdentityRegistered(UNREGISTERED_IDENTITY, configuration)).resolves.toBe(false);\n      expect(isRegistered).toHaveBeenCalled();\n    });\n  });\n\n  describe('registerIdentity method', () => {\n\n    const isRegisteredCall = jest.fn(() => true);\n    const isRegistered = jest.fn(() => ({\n      call: isRegisteredCall,\n    }));\n    const register = jest.fn(() => ({\n      encodeABI: jest.fn(() => 'encodeABI'),\n      estimateGas: jest.fn(() => 100),\n      send: jest.fn(() => Promise.resolve()),\n    }));\n    const privateKeyToAccount = jest.fn(() => ({\n      sign: () => ({v: 'v', r: 'r', s: 's'}),\n    }));\n    const sendSignedTransactionSuccess = jest.fn((type: string, cb: any) => jest.fn(cb(transactionReceipt)));\n    const sendSignedTransaction = jest.fn(() => ({\n      once: sendSignedTransactionSuccess,\n      on: (type: string, cb: any) => jest.fn(cb(web3Error)),\n    }));\n    const signTransaction = jest.fn(() => signedTransaction);\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    beforeAll(() => {\n      jest.doMock('web3', () => Web3Mock);\n      const web3 = require('web3');\n      web3.eth.Contract.methods = { isRegistered, register };\n      web3.eth.accounts = { privateKeyToAccount, signTransaction };\n      web3.eth.sendSignedTransaction = sendSignedTransaction;\n    });\n\n    it('should call relevant functions and return ALREADY_REGISTERED for registered Id', async () => {\n      isRegisteredCall.mockImplementation(() => true);\n      const contracts: any = (await import('./Contracts')).default;\n      await expect(contracts.registerIdentity(REGISTERED_IDENTITY,\n        IDENTITY_PRIVATE_KEY,\n        WALLET_ADDRESS,\n        WALLET_PRIVATE_KEY,\n        configuration)).resolves.toEqual('ALREADY_REGISTERED');\n      expect(isRegistered).toHaveBeenCalled();\n    });\n\n    it('should call relevant functions and return transaction receipt for unregistered Id', async () => {\n      isRegisteredCall.mockImplementation(() => false);\n      const contracts: any = (await import('./Contracts')).default;\n      await expect(contracts.registerIdentity(UNREGISTERED_IDENTITY,\n        IDENTITY_PRIVATE_KEY,\n        WALLET_ADDRESS,\n        WALLET_PRIVATE_KEY,\n        configuration)).resolves.toBe(transactionReceipt.transactionHash);\n      expect(signTransaction).toHaveBeenCalled();\n      expect(privateKeyToAccount).toHaveBeenCalled();\n    });\n\n    it('should call relevant functions and throw web3 error', async () => {\n      isRegisteredCall.mockImplementation(() => false);\n      sendSignedTransactionSuccess.mockImplementation(() => false);\n      const contracts: any = (await import('./Contracts')).default;\n      await expect(contracts.registerIdentity(UNREGISTERED_IDENTITY,\n        IDENTITY_PRIVATE_KEY,\n        WALLET_ADDRESS,\n        WALLET_PRIVATE_KEY,\n        configuration)).rejects.toBe(web3Error);\n      expect(signTransaction).toHaveBeenCalled();\n      expect(privateKeyToAccount).toHaveBeenCalled();\n    });\n\n  });\n\n  describe('approveMission method', () => {\n\n    const approve = jest.fn(() => ({\n      encodeABI: jest.fn(() => 'encodeABI'),\n      estimateGas: jest.fn(() => 100),\n    }));\n    const sendSignedTransactionSuccess = jest.fn((type: string, cb: any) => jest.fn(cb(transactionReceipt)));\n    const sendSignedTransaction = jest.fn(() => ({\n      once: sendSignedTransactionSuccess,\n      on: (type: string, cb: any) => jest.fn(cb(web3Error)),\n    }));\n    const signTransaction = jest.fn(() => signedTransaction);\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    beforeAll(() => {\n      jest.doMock('web3', () => Web3Mock);\n      const web3 = require('web3');\n      web3.eth.Contract.methods = { approve };\n      web3.eth.accounts = { signTransaction };\n      web3.eth.sendSignedTransaction = sendSignedTransaction;\n    });\n\n    it('should call relevant functions and return transaction receipt', async () => {\n      const contracts: any = (await import('./Contracts')).default;\n      await expect(contracts.approveMission(REGISTERED_IDENTITY,\n        WALLET_PRIVATE_KEY,\n        configuration)).resolves.toBe(transactionReceipt);\n      expect(approve).toHaveBeenCalled();\n      expect(signTransaction).toHaveBeenCalled();\n      expect(sendSignedTransaction).toHaveBeenCalled();\n    });\n\n    it('should call relevant functions and throw web3 error', async () => {\n      sendSignedTransactionSuccess.mockImplementation(() => false);\n      const contracts: any = (await import('./Contracts')).default;\n      await expect(contracts.approveMission(REGISTERED_IDENTITY,\n        WALLET_PRIVATE_KEY,\n        configuration)).rejects.toBe(web3Error);\n      expect(approve).toHaveBeenCalled();\n      expect(signTransaction).toHaveBeenCalled();\n      expect(sendSignedTransaction).toHaveBeenCalled();\n    });\n  });\n\n  describe('startMission method', () => {\n\n    const create = jest.fn(() => ({\n      encodeABI: jest.fn(() => 'encodeABI'),\n      estimateGas: jest.fn(() => 100),\n    }));\n    const sendSignedTransactionSuccess = jest.fn((type: string, cb: any) => jest.fn(cb(transactionReceipt)));\n    const sendSignedTransaction = jest.fn(() => ({\n      once: sendSignedTransactionSuccess,\n      on: (type: string, cb: any) => jest.fn(cb(web3Error)),\n    }));\n    const signTransaction = jest.fn(() => signedTransaction);\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    beforeAll(() => {\n      jest.doMock('web3', () => Web3Mock);\n      const web3 = require('web3');\n      web3.eth.Contract.methods = { create };\n      web3.eth.accounts = { signTransaction };\n      web3.eth.sendSignedTransaction = sendSignedTransaction;\n    });\n\n    it('should call relevant functions and return transaction receipt', async () => {\n      const contracts: any = (await import('./Contracts')).default;\n      await expect(contracts.startMission(MISSION_ID,\n        REGISTERED_IDENTITY,\n        WALLET_PRIVATE_KEY,\n        VEHICLE_ID,\n        MISSION_PRICE,\n        configuration)).resolves.toBe(transactionReceipt);\n      expect(create).toHaveBeenCalled();\n      expect(signTransaction).toHaveBeenCalled();\n      expect(sendSignedTransaction).toHaveBeenCalled();\n    });\n\n    it('should call relevant functions and throw web3 error', async () => {\n      sendSignedTransactionSuccess.mockImplementation(() => false);\n      const contracts: any = (await import('./Contracts')).default;\n      await expect(contracts.startMission(MISSION_ID,\n        REGISTERED_IDENTITY,\n        WALLET_PRIVATE_KEY,\n        VEHICLE_ID,\n        MISSION_PRICE,\n        configuration)).rejects.toBe(web3Error);\n      expect(create).toHaveBeenCalled();\n      expect(signTransaction).toHaveBeenCalled();\n      expect(sendSignedTransaction).toHaveBeenCalled();\n    });\n  });\n\n  describe('finalizeMission method', () => {\n\n    const fulfilled = jest.fn(() => ({\n      encodeABI: jest.fn(() => 'encodeABI'),\n      estimateGas: jest.fn(() => 100),\n    }));\n    const sendSignedTransactionSuccess = jest.fn((type: string, cb: any) => jest.fn(cb(transactionReceipt)));\n    const sendSignedTransaction = jest.fn(() => ({\n      once: sendSignedTransactionSuccess,\n      on: (type: string, cb: any) => jest.fn(cb(web3Error)),\n    }));\n    const signTransaction = jest.fn(() => signedTransaction);\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    beforeAll(() => {\n      jest.doMock('web3', () => Web3Mock);\n      const web3 = require('web3');\n      web3.eth.Contract.methods = { fulfilled };\n      web3.eth.accounts = { signTransaction };\n      web3.eth.sendSignedTransaction = sendSignedTransaction;\n    });\n\n    it('should call relevant functions and return start mission transaction receipt', async () => {\n      const contracts: any = (await import('./Contracts')).default;\n      await expect(contracts.finalizeMission(MISSION_ID,\n        REGISTERED_IDENTITY,\n        WALLET_PRIVATE_KEY,\n        configuration)).resolves.toBe(transactionReceipt);\n      expect(fulfilled).toHaveBeenCalled();\n      expect(signTransaction).toHaveBeenCalled();\n      expect(sendSignedTransaction).toHaveBeenCalled();\n    });\n\n    it('should call relevant functions and throw web3 error', async () => {\n      sendSignedTransactionSuccess.mockImplementation(() => false);\n      const contracts: any = (await import('./Contracts')).default;\n      await expect(contracts.finalizeMission(MISSION_ID,\n        REGISTERED_IDENTITY,\n        WALLET_PRIVATE_KEY,\n        configuration)).rejects.toBe(web3Error);\n      expect(fulfilled).toHaveBeenCalled();\n      expect(signTransaction).toHaveBeenCalled();\n      expect(sendSignedTransaction).toHaveBeenCalled();\n    });\n  });\n\n  describe('watchContract method', () => {\n\n    const getPastEvents = jest.fn();\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n      jest.resetModules();\n    });\n\n    beforeAll(() => {\n      jest.useFakeTimers();\n      jest.doMock('web3', () => Web3Mock);\n      const web3 = require('web3');\n      web3.eth.Contract.getPastEvents = getPastEvents;\n    });\n\n    it('should call relevant functions and receive contract events', async () => {\n      const pastEvent1 = [{ transactionHash: 'TRANSACTION_HASH_1', blockNumber: 1, transactionIndex: 1 }];\n      const pastEvent2 = [{ transactionHash: 'TRANSACTION_HASH_2', blockNumber: 2, transactionIndex: 1 }];\n      const pastEvent3 = [{ transactionHash: 'TRANSACTION_HASH_3', blockNumber: 2, transactionIndex: 2 }];\n      getPastEvents\n      .mockImplementationOnce(() => Promise.resolve(pastEvent1))\n      .mockImplementationOnce(() => Promise.resolve(pastEvent2))\n      .mockImplementationOnce(() => Promise.resolve(pastEvent3))\n      .mockImplementation(() => Promise.resolve({}));\n      const spy = jest.fn();\n      const contracts: any = (await import('./Contracts')).default;\n      const observable = contracts.watchContract(REGISTERED_IDENTITY, ContractTypes.basicMission, configuration);\n      observable.subscribe(spy);\n      jest.advanceTimersByTime(10000);\n      await forContextSwitch();\n      expect(getPastEvents.mock.calls.length).toBe(5);\n      expect(spy.mock.calls.length).toBe(3);\n      expect(spy.mock.calls[0][0]).toEqual(pastEvent1[0]);\n      expect(spy.mock.calls[1][0]).toEqual(pastEvent2[0]);\n    });\n\n    it('should call relevant functions and receive contract error events', async () => {\n      getPastEvents.mockImplementation(() => Promise.reject(web3Error));\n      const spy = jest.fn();\n      const contracts: any = (await import('./Contracts')).default;\n      const observable = contracts.watchContract(REGISTERED_IDENTITY, ContractTypes.basicMission, configuration);\n      observable.subscribe(spy, (err: any) => {\n        expect(err).toEqual(web3Error);\n      });\n      jest.advanceTimersByTime(10000);\n      await forContextSwitch();\n      expect(spy).not.toHaveBeenCalled();\n    });\n\n  });\n});\n"]}