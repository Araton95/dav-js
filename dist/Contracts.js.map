{"version":3,"sources":["../src/Contracts.ts"],"names":[],"mappings":"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","file":"Contracts.js","sourcesContent":["import IConfig from './IConfig';\nimport { DavID, BigInteger, ID, ContractsArtifacts } from './common-types';\nimport Web3 = require('web3');\nimport { ContractTypes } from './common-enums';\nimport Contract from 'web3/eth/contract';\nimport { EventLog, TransactionReceipt } from 'web3/types';\nimport { Observable } from 'rxjs';\nimport IPrice from './IPrice';\n\nlet contracts: ContractsArtifacts = {\n    Identity: require('./contracts/Identity'),\n    DAVToken: require('./contracts/DAVToken'),\n    BasicMission: require('./contracts/BasicMission'),\n};\n\nconst REGISTRATION_REQUEST_HASH = new Web3().utils.sha3('DAV Identity Registration');\nconst TOKEN_AMOUNT = '1500000000000000000'; // TODO: TOKEN_AMOUNT need to be set by basicMission contract.\n\ninterface IContract {\n    contract: Contract;\n    contractAddress: string;\n    abi: any[];\n}\n\nexport default class Contracts {\n\n    private static initWeb3(config: IConfig): Web3 {\n        return new Web3(new Web3.providers.HttpProvider(config.ethNodeUrl));\n    }\n\n    private static getContract(contractType: ContractTypes, web3: Web3, config: IConfig): IContract {\n        if (config.contracts) {\n            contracts = config.contracts;\n        }\n        const abi = contracts[contractType].abi;\n        const contractAddress = contracts[contractType].networks[config.blockchainType].address;\n        const contract = new web3.eth.Contract(abi, contractAddress);\n        return { abi, contractAddress, contract };\n    }\n\n    private static sendSignedTransaction(web3: Web3, rawTransaction: string): Promise<TransactionReceipt> {\n        return new Promise((resolve, reject) => {\n            const transaction = web3.eth.sendSignedTransaction(rawTransaction);\n            transaction.once('receipt', receipt => resolve(receipt));\n            transaction.on('error', err => reject(err));\n        });\n    }\n\n    private static async checkContractPastEvents(contract: Contract/* , filterParam: string */): Promise<EventLog[]> {\n        // TODO: Filter getPastEvents by sellerId or by missionId.\n        const event = await contract.getPastEvents('allEvents');\n        return event;\n    }\n\n    private static toSafeGasLimit(gasAmount: number) {\n        return Math.min(gasAmount + 100, 4000000);\n    }\n\n    private static calculatePrice(price: IPrice[]) {\n        return '150000000000000000';\n    }\n\n    public static generateMissionId(config: IConfig): string {\n        const web3 = Contracts.initWeb3(config);\n        const { address } = web3.eth.accounts.create();\n        return address;\n    }\n\n    public static async isIdentityRegistered(davId: DavID, config: IConfig): Promise<boolean> {\n        const web3 = Contracts.initWeb3(config);\n        const { contract } = Contracts.getContract(ContractTypes.identity, web3, config);\n        const receipt = await contract.methods.isRegistered(davId).call();\n        return receipt;\n    }\n\n    public static async registerIdentity(davId: DavID,\n        identityPrivateKey: string,\n        walletAddress: string,\n        walletPrivateKey: string,\n        config: IConfig): Promise<string> {\n        const isAlreadyRegistered = await Contracts.isIdentityRegistered(davId, config);\n        if (isAlreadyRegistered) {\n            return 'ALREADY_REGISTERED';\n        }\n        const web3 = Contracts.initWeb3(config);\n        const { contract, contractAddress } = Contracts.getContract(ContractTypes.identity, web3, config);\n        const { sign } = web3.eth.accounts.privateKeyToAccount(identityPrivateKey);\n        const { v, r, s } = sign(REGISTRATION_REQUEST_HASH);\n        const { encodeABI, estimateGas } = await contract.methods.register(davId, v, r, s);\n        const tx = {\n            data: encodeABI(),\n            to: contractAddress,\n            from: walletAddress,\n            gas: Contracts.toSafeGasLimit(await estimateGas({ from: walletAddress })),\n            gasPrice: await web3.eth.getGasPrice(),\n        };\n        const { rawTransaction } = await web3.eth.accounts.signTransaction(tx, walletPrivateKey);\n        const transactionReceipt = await Contracts.sendSignedTransaction(web3, rawTransaction);\n        return transactionReceipt.transactionHash;\n    }\n\n    public static async approveMission(davId: DavID, walletPrivateKey: string, config: IConfig): Promise<TransactionReceipt> {\n        const web3 = Contracts.initWeb3(config);\n        const { contract, contractAddress } = Contracts.getContract(ContractTypes.davToken, web3, config);\n        const missionContract = Contracts.getContract(ContractTypes.basicMission, web3, config);\n        const { encodeABI, estimateGas } = await contract.methods.approve(missionContract.contractAddress, TOKEN_AMOUNT);\n        const tx = {\n            data: encodeABI(),\n            to: contractAddress,\n            from: davId,\n            gas: Contracts.toSafeGasLimit(await estimateGas({ from: davId, to: contractAddress })),\n            gasPrice: await web3.eth.getGasPrice(),\n        };\n        const { rawTransaction } = await web3.eth.accounts.signTransaction(tx, walletPrivateKey);\n        const transactionReceipt = await Contracts.sendSignedTransaction(web3, rawTransaction);\n        return transactionReceipt;\n    }\n\n    public static async startMission(missionId: ID, davId: DavID, walletPrivateKey: string, vehicleId: DavID,\n        price: IPrice[], config: IConfig): Promise<TransactionReceipt> {\n        const fullPrice = Contracts.calculatePrice(price);\n        const web3 = Contracts.initWeb3(config);\n        const { contract, contractAddress } = Contracts.getContract(ContractTypes.basicMission, web3, config);\n        const { encodeABI, estimateGas } = await contract.methods.create(missionId, vehicleId, davId, TOKEN_AMOUNT);\n        const tx = {\n            data: encodeABI(),\n            to: contractAddress,\n            from: davId,\n            gas: Contracts.toSafeGasLimit(await estimateGas({ from: davId, to: contractAddress, value: fullPrice })),\n            value: fullPrice,\n            gasPrice: await web3.eth.getGasPrice(),\n        };\n        const { rawTransaction } = await web3.eth.accounts.signTransaction(tx, walletPrivateKey);\n        const transactionReceipt = await Contracts.sendSignedTransaction(web3, rawTransaction);\n        return transactionReceipt;\n    }\n\n    public static async finalizeMission(missionId: ID, davId: DavID, walletPrivateKey: string, config: IConfig): Promise<TransactionReceipt> {\n        const web3 = Contracts.initWeb3(config);\n        const { contract, contractAddress } = Contracts.getContract(ContractTypes.basicMission, web3, config);\n        const { encodeABI, estimateGas } = await contract.methods.fulfilled(missionId);\n        const tx = {\n            data: encodeABI(),\n            to: contractAddress,\n            from: davId,\n            gas: Contracts.toSafeGasLimit(await estimateGas({ from: davId })),\n            gasPrice: await web3.eth.getGasPrice(),\n        };\n        const { rawTransaction } = await web3.eth.accounts.signTransaction(tx, walletPrivateKey);\n        const transactionReceipt = await Contracts.sendSignedTransaction(web3, rawTransaction);\n        return transactionReceipt;\n    }\n\n    public static watchContract(davId: string, contractType: ContractTypes, config: IConfig): Observable<EventLog> {\n        const web3 = Contracts.initWeb3(config);\n        const { contract } = Contracts.getContract(contractType, web3, config);\n        let lastBlock = 0;\n        let lastTransactionIndex = 0;\n        const events = Observable.interval(2000)\n            .map(() => Contracts.checkContractPastEvents(contract/* , davId */))\n            .map(promise => Observable.fromPromise(promise))\n            .map(eventsObservable => eventsObservable.mergeAll())\n            .map(eventsArray => Observable.from(eventsArray))\n            .mergeAll()\n            .filter(event => event.blockNumber > lastBlock || (event.blockNumber === lastBlock && event.transactionIndex > lastTransactionIndex))\n            .do(event => {\n                lastBlock = event.blockNumber;\n                lastTransactionIndex = event.transactionIndex;\n            });\n        return events;\n    }\n}\n"]}