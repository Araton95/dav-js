{"version":3,"sources":["../src/NeedFilterParams.ts"],"names":[],"mappings":"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","file":"NeedFilterParams.js","sourcesContent":["import BasicParams from './BasicParams';\nimport { DavID, ILocation } from './common-types';\nimport { LatLonSpherical as LatLon } from 'geodesy';\n\n/**\n * @class The abstract Class NeedFilterParams represent common parameters of NeedFilterParams classes.\n */\nexport default abstract class NeedFilterParams extends BasicParams {\n  /**\n   * @property The service provider location.\n   */\n  public location: ILocation;\n  /**\n   * @property The service provider max supported distance. if null then it is a global service (not limited to a geographic area)\n   */\n  public radius: number;\n  /**\n   * @property Provider Dav ID.\n   */\n  public davId: DavID;\n\n  constructor(protocol: string, type: string, values?: Partial<NeedFilterParams>) {\n    super(protocol, type, values);\n    if (!!values) {\n      this.location = values.location;\n      this.davId = values.davId;\n      this.radius = parseFloat((values.radius).toFixed(1));\n    }\n  }\n\n  public serialize() {\n    const formatArea = (area: any) => {\n      const center = new LatLon(area.lat, area.long);\n      const distance = area.radius * Math.sqrt(2);\n      const topLeft = center.destinationPoint(distance, 45);\n      const bottomRight = center.destinationPoint(-distance, 45);\n      return {\n        max: {\n          latitude: parseFloat((topLeft.lat).toFixed(6)),\n          longitude: parseFloat((topLeft.lon).toFixed(6)),\n        },\n        min: {\n          latitude: parseFloat((bottomRight.lat).toFixed(6)),\n          longitude: parseFloat((bottomRight.lon).toFixed(6)),\n        },\n      };\n    };\n    const formattedParams = super.serialize();\n    Object.assign(formattedParams, {\n      davId: this.davId,\n      area: formatArea({ ...this.location, radius: this.radius }),\n    });\n    return formattedParams;\n  }\n\n  public deserialize(json: any): void {\n    super.deserialize(json);\n    const formatArea = (area: any) => {\n      const topLeft = new LatLon(area.max.latitude, area.max.longitude);\n      const bottomRight = new LatLon(area.min.latitude, area.min.longitude);\n      const distance = topLeft.distanceTo(bottomRight);\n      const center = topLeft.intermediatePointTo(bottomRight, 0.5);\n      return {\n        lat: parseFloat((center.lat).toFixed(6)),\n        long: parseFloat((center.lon).toFixed(6)),\n        radius: parseFloat(((distance / 2) / Math.sqrt(2)).toFixed(1)),\n      };\n    };\n    const formattedArea = formatArea(json.area);\n    this.davId = json.davId;\n    this.location = {lat: formattedArea.lat, long: formattedArea.long};\n    this.radius = formattedArea.radius;\n  }\n}\n"]}