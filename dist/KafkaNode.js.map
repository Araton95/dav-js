{"version":3,"sources":["../src/KafkaNode.ts"],"names":[],"mappings":"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","file":"KafkaNode.js","sourcesContent":["import { KafkaClient, Producer, Consumer, Message } from 'kafka-node';\nimport IConfig from './IConfig';\nimport { Observable, IKafka } from './common-types';\nimport BasicParams from './BasicParams';\nimport { Subject, Observable as RxObservable } from 'rxjs';\nimport KafkaMessageStream, { IKafkaMessage } from './KafkaMessageStream';\nimport KafkaBase from './KafkaBase';\nimport { ProduceRequest } from 'kafka-node';\nimport { retryPromise } from '.';\nimport sdkLogger from './sdkLogger';\n\nexport default class Kafka extends KafkaBase implements IKafka {\n  private async getKafkaClient(config: IConfig): Promise<KafkaClient> {\n    return retryPromise(\n      currentAttempt =>\n        new Promise<KafkaClient>((resolve, reject) => {\n          const client = new KafkaClient({\n            kafkaHost: config.kafkaSeedUrls[0],\n          });\n          sdkLogger(\n            `Kafka connecting... ${\n              currentAttempt > 1 ? `${currentAttempt} try` : ''\n            }`,\n          );\n          client.connect();\n          client.on('ready', () => {\n            sdkLogger(`Kafka connected`);\n            resolve(client);\n          });\n          client.on('error', err => {\n            sdkLogger(`Kafka connection error ${err}`);\n            reject(err);\n          });\n        }),\n    );\n  }\n\n  private async getProducer(config: IConfig): Promise<Producer> {\n    const client = await this.getKafkaClient(config);\n    const producer = new Producer(client);\n    return producer;\n  }\n\n  private async getConsumer(\n    topicId: string,\n    config: IConfig,\n  ): Promise<Consumer> {\n    const client = await this.getKafkaClient(config);\n    const consumer = new Consumer(client, [{ topic: topicId }], {\n      groupId: topicId,\n      autoCommit: true,\n    });\n    return consumer;\n  }\n\n  public async createTopic(topicId: string, config: IConfig): Promise<void> {\n    return retryPromise(\n      currentAttempt =>\n        new Promise<void>(async (resolve, reject) => {\n          const client = await this.getKafkaClient(config);\n          sdkLogger(\n            `Kafka creating topic ${topicId}... ${\n              currentAttempt > 1 ? `${currentAttempt} try` : ''\n            }`,\n          );\n          (client as any).createTopics(\n            [{ topic: topicId, partitions: 1, replicationFactor: 1 }],\n            (err: any, data: any) => {\n              if (err) {\n                sdkLogger(`Kafka error creating topic ${topicId}`);\n                reject(err);\n              } else {\n                sdkLogger(`Kafka topic created ${topicId}`);\n                resolve();\n              }\n            },\n          );\n        }),\n    );\n  }\n\n  public sendMessage(\n    topicId: string,\n    message: string,\n    config: IConfig,\n  ): Promise<void> {\n    return this.sendPayloads([{ topic: topicId, messages: message }], config);\n  }\n\n  public async sendPayloads(\n    payloads: ProduceRequest[],\n    config: IConfig,\n  ): Promise<void> {\n    return retryPromise(\n      currentAttempt =>\n        new Promise<void>(async (resolve, reject) => {\n          const producer = await this.getProducer(config);\n          sdkLogger(\n            `Kafka sending ${JSON.stringify(payloads)}... ${\n              currentAttempt > 1 ? `${currentAttempt} try` : ''\n            }`,\n          );\n          producer.send(payloads, (err: any, data: any) => {\n            if (err) {\n              sdkLogger(`Kafka error sending ${JSON.stringify(payloads)}`);\n              reject(err);\n            } else {\n              sdkLogger(`Kafka sent ${JSON.stringify(payloads)}`);\n              resolve();\n            }\n          });\n        }),\n    );\n  }\n\n  public sendParams(\n    topicId: string,\n    basicParams: BasicParams,\n    config: IConfig,\n  ): Promise<void> {\n    return this.sendMessage(\n      topicId,\n      JSON.stringify(basicParams.serialize()),\n      config,\n    );\n  }\n\n  public async rawMessages(\n    topicId: string,\n    config: IConfig,\n  ): Promise<RxObservable<Message>> {\n    const consumer = await this.getConsumer(topicId, config);\n    const kafkaStream: Subject<Message> = new Subject<Message>();\n    sdkLogger(`Kafka listening on ${topicId}`);\n    consumer.on('message', message => {\n      try {\n        sdkLogger(`Kafka message on ${topicId}: ${JSON.stringify(message)}`);\n        const messageString = message.value.toString();\n        kafkaStream.next(message);\n      } catch (error) {\n        kafkaStream.error(\n          `error while trying to parse message. topic: ${topicId} error: ${JSON.stringify(\n            error,\n          )}, message: ${JSON.stringify(message)}`,\n        );\n      }\n    });\n    consumer.on('error', err => {\n      sdkLogger(`Kafka consumer error on ${topicId}: ${JSON.stringify(err)}`);\n      kafkaStream.error(\n        `Consumer error. topic: ${topicId} error: ${JSON.stringify(err)}`,\n      );\n    });\n    return kafkaStream;\n  }\n\n  public async messages(\n    topicId: string,\n    config: IConfig,\n  ): Promise<KafkaMessageStream> {\n    const stream = (await this.rawMessages(topicId, config)).map(message => {\n      const messageString = message.value.toString();\n      const messageObject = JSON.parse(messageString);\n      return {\n        type: messageObject.type,\n        protocol: messageObject.protocol,\n        contents: messageString,\n      } as IKafkaMessage;\n    });\n    return new KafkaMessageStream(Observable.fromObservable(stream, topicId));\n  }\n\n  public async isConnected(config: IConfig) {\n    await this.getKafkaClient(config);\n    return true;\n  }\n}\n"]}