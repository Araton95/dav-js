{"version":3,"sources":["../src/KafkaNode.ts"],"names":[],"mappings":";;AAAA,2CAAsE;AAEtE,iDAAoD;AAEpD,+BAA2D;AAC3D,6DAAyE;AACzE,2CAAoC;AAGpC,WAA2B,SAAQ,mBAAS;IAIhC,KAAK,CAAC,cAAc,CAAC,MAAe;QACxC,IAAI,KAAK,CAAC,eAAe,EAAE;YACvB,OAAO,KAAK,CAAC,MAAM,CAAC;SACvB;aAAM;YACH,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBACf,KAAK,CAAC,MAAM,GAAG,IAAI,wBAAW,CAAC,EAAE,SAAS,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBACvE,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;aAC1B;YACD,OAAO,IAAI,OAAO,CAAc,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAChD,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;oBAC1B,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC;oBAC7B,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC1B,CAAC,CAAC,CAAC;gBACH,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAEO,KAAK,CAAC,WAAW,CAAC,MAAe;QACrC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACjD,MAAM,QAAQ,GAAG,IAAI,qBAAQ,CAAC,MAAM,CAAC,CAAC;QACtC,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEO,KAAK,CAAC,WAAW,CAAC,OAAe,EAAE,MAAe;QACtD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACjD,MAAM,QAAQ,GAAG,IAAI,qBAAQ,CACzB,MAAM,EACN;YACI,EAAE,KAAK,EAAE,OAAO,EAAE;SACrB,EACD;YACI,OAAO,EAAE,SAAS;YAClB,UAAU,EAAE,IAAI;SACnB,CACJ,CAAC;QACF,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,OAAe,EAAE,MAAe;QACrD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACjD,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACvC,MAAc,CAAC,YAAY,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,EAAE,iBAAiB,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAQ,EAAE,IAAS,EAAE,EAAE;gBAC5G,IAAI,GAAG,EAAE;oBACL,MAAM,CAAC,GAAG,CAAC,CAAC;iBACf;qBAAM;oBACH,OAAO,EAAE,CAAC;iBACb;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,WAAW,CAAC,OAAe,EAAE,OAAe,EAAE,MAAe;QAChE,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;IAC9E,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,QAA0B,EAAE,MAAe;QACjE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAChD,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACnD,MAAM,WAAW,GAAG,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtD,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAQ,EAAE,IAAS,EAAE,EAAE;gBAC5C,IAAI,GAAG,EAAE;oBACL,MAAM,CAAC,GAAG,CAAC,CAAC;iBACf;qBAAM;oBACH,OAAO,EAAE,CAAC;iBACb;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,OAAO,WAAW,CAAC;IACvB,CAAC;IAEM,UAAU,CAAC,OAAe,EAAE,WAAwB,EAAE,MAAe;QACxE,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;IACtF,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,OAAe,EAAE,MAAe;QACrD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACzD,MAAM,WAAW,GAAqB,IAAI,cAAO,EAAW,CAAC;QAC7D,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,gBAAgB,OAAO,EAAE,CAAC,CAAC;QACvC,QAAQ,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,EAAE;YAC/B,IAAI;gBACA,sCAAsC;gBACtC,OAAO,CAAC,GAAG,CAAC,cAAc,OAAO,KAAK,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBACjE,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;gBAC/C,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC7B;YAAC,OAAO,KAAK,EAAE;gBACZ,WAAW,CAAC,KAAK,CAAC,+CAA+C,OAAO,WAAW,KAAK,cAAc,OAAO,EAAE,CAAC,CAAC;aACpH;QACL,CAAC,CAAC,CAAC;QACH,OAAO,WAAW,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,OAAe,EAAE,MAAe;QAClD,MAAM,MAAM,GAAG,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CACxD,CAAC,OAAO,EAAE,EAAE;YACR,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YAC/C,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAChD,OAAQ;gBACJ,IAAI,EAAE,aAAa,CAAC,IAAI;gBACxB,QAAQ,EAAE,aAAa,CAAC,QAAQ;gBAChC,QAAQ,EAAE,aAAa;aACR,CAAC;QACxB,CAAC,CAAC,CAAC;QACP,OAAO,IAAI,4BAAkB,CAAC,yBAAU,CAAC,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;IAC9E,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,MAAe;QACpC,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC;IAChB,CAAC;;AAlHc,YAAM,GAAgB,IAAI,CAAC;AAC3B,qBAAe,GAAY,KAAK,CAAC;AAFpD,wBAoHC","file":"KafkaNode.js","sourcesContent":["import { KafkaClient, Producer, Consumer, Message } from 'kafka-node';\nimport IConfig from './IConfig';\nimport { Observable, IKafka } from './common-types';\nimport BasicParams from './BasicParams';\nimport { Subject, Observable as RxObservable } from 'rxjs';\nimport KafkaMessageStream, { IKafkaMessage } from './KafkaMessageStream';\nimport KafkaBase from './KafkaBase';\nimport { ProduceRequest } from 'kafka-node';\n\nexport default class Kafka extends KafkaBase implements IKafka {\n    private static client: KafkaClient = null;\n    private static clientConnected: boolean = false;\n\n    private async getKafkaClient(config: IConfig): Promise<KafkaClient> {\n        if (Kafka.clientConnected) {\n            return Kafka.client;\n        } else {\n            if (!Kafka.client) {\n                Kafka.client = new KafkaClient({ kafkaHost: config.kafkaSeedUrls[0] });\n                Kafka.client.connect();\n            }\n            return new Promise<KafkaClient>((resolve, reject) => {\n                Kafka.client.on('ready', () => {\n                    Kafka.clientConnected = true;\n                    resolve(Kafka.client);\n                });\n                Kafka.client.on('error', (err) => reject(err));\n            });\n        }\n    }\n\n    private async getProducer(config: IConfig): Promise<Producer> {\n        const client = await this.getKafkaClient(config);\n        const producer = new Producer(client);\n        return producer;\n    }\n\n    private async getConsumer(topicId: string, config: IConfig): Promise<Consumer> {\n        const client = await this.getKafkaClient(config);\n        const consumer = new Consumer(\n            client,\n            [\n                { topic: topicId },\n            ],\n            {\n                groupId: 'topicId',\n                autoCommit: true,\n            },\n        );\n        return consumer;\n    }\n\n    public async createTopic(topicId: string, config: IConfig): Promise<void> {\n        const client = await this.getKafkaClient(config);\n        await new Promise<void>((resolve, reject) => {\n            (client as any).createTopics([{ topic: topicId, partitions: 1, replicationFactor: 1 }], (err: any, data: any) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n\n    public sendMessage(topicId: string, message: string, config: IConfig): Promise<void> {\n        return this.sendPayloads([{ topic: topicId, messages: message }], config);\n    }\n\n    public async sendPayloads(payloads: ProduceRequest[], config: IConfig): Promise<void> {\n        const producer = await this.getProducer(config);\n        // tslint:disable-next-line:no-console\n        console.log(`sending ${JSON.stringify(payloads)}`);\n        const sendPromise = new Promise<void>((resolve, reject) => {\n            producer.send(payloads, (err: any, data: any) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            });\n        });\n        return sendPromise;\n    }\n\n    public sendParams(topicId: string, basicParams: BasicParams, config: IConfig): Promise<void> {\n        return this.sendMessage(topicId, JSON.stringify(basicParams.serialize()), config);\n    }\n\n    public async rawMessages(topicId: string, config: IConfig): Promise<RxObservable<Message>> {\n        const consumer = await this.getConsumer(topicId, config);\n        const kafkaStream: Subject<Message> = new Subject<Message>();\n        // tslint:disable-next-line:no-console\n        console.log(`Listening on ${topicId}`);\n        consumer.on('message', (message) => {\n            try {\n                // tslint:disable-next-line:no-console\n                console.log(`Message on ${topicId}: ${JSON.stringify(message)}`);\n                const messageString = message.value.toString();\n                kafkaStream.next(message);\n            } catch (error) {\n                kafkaStream.error(`error while trying to parse message. topic: ${topicId} error: ${error}, message: ${message}`);\n            }\n        });\n        return kafkaStream;\n    }\n\n    public async messages(topicId: string, config: IConfig): Promise<KafkaMessageStream> {\n        const stream = (await this.rawMessages(topicId, config)).map(\n            (message) => {\n                const messageString = message.value.toString();\n                const messageObject = JSON.parse(messageString);\n                return ({\n                    type: messageObject.type,\n                    protocol: messageObject.protocol,\n                    contents: messageString,\n                } as IKafkaMessage);\n            });\n        return new KafkaMessageStream(Observable.fromObservable(stream, topicId));\n    }\n\n    public async isConnected(config: IConfig) {\n        await this.getKafkaClient(config);\n        return true;\n    }\n}\n"]}