{"version":3,"sources":["../src/SDK.ts"],"names":[],"mappings":";;AAEA,yCAAkC;AAClC,2CAAoC;AACpC;;GAEG;AACH;IAEE,YAAoB,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;IAAS,CAAC;IAC9C;;;;;OAKG;IACI,KAAK,CAAC,WAAW,CAAC,KAAY,EAAE,MAAgB;QACrD,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAC5D,IAAI,CAAC,oBAAoB,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,GAAG,KAAK,+BAA+B,CAAC,CAAC;SAC1D;QACD,4CAA4C;QAC5C,OAAO,IAAI,kBAAQ,CAAC,UAAU,EAAE,KAAK,EAAE,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;IACjE,CAAC;IACD;;;;OAIG;IACI,KAAK,CAAC,YAAY,CAAC,KAAY;QACpC,OAAO,MAAM,mBAAS,CAAC,oBAAoB,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACnE,CAAC;IACD;;;;;;;OAOG;IACI,KAAK,CAAC,gBAAgB,CAAC,KAAY,EAAE,aAAqB,EAAE,gBAAwB,EAAE,kBAA0B;QACrH,OAAO,MAAM,mBAAS,CAAC,gBAAgB,CAAC,KAAK,EAAE,kBAAkB,EAAE,aAAa,EAAE,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACpH,CAAC;CACF;AApCD,sBAoCC","file":"SDK.js","sourcesContent":["import { ID, DavID } from './common-types';\nimport IConfig from './IConfig';\nimport Identity from './Identity';\nimport Contracts from './Contracts';\n/**\n * @class The DavSDK class instance.\n */\nexport default class SDK {\n\n  constructor(private _config: IConfig) { /**/ }\n  /**\n   * @method getIdentity Used to create an instance DAV Identity class.\n   * @param davId the unique DAV identity string.\n   * @param config DavSDK configuration object.\n   * @returns Identity class instance with the specified configuration object and DavId.\n   */\n  public async getIdentity(davId: DavID, config?: IConfig): Promise<Identity> {\n    const isIdentityRegistered = await this.isRegistered(davId);\n    if (!isIdentityRegistered) {\n      throw new Error(`${davId} is not a registered identity`);\n    }\n    // TODO: create topic for Identity Channel#1\n    return new Identity('NO_TOPIC', davId, config || this._config);\n  }\n  /**\n   * @method isRegistered Used to check the DAV Identity is registered.\n   * @param davId The unique DAV identity string.\n   * @returns true if the davId that specified is registered to the DAV identity contract, and false otherwise.\n   */\n  public async isRegistered(davId: DavID): Promise<boolean> {\n    return await Contracts.isIdentityRegistered(davId, this._config);\n  }\n  /**\n   * @method registerIdentity Used to register an instance to the DAV identity contract.\n   * @param davId The DAV identity string to register.\n   * @param walletAddress Ethereum wallet address to register the identity with.\n   * @param walletPrivateKey Ethereum wallet private key, to charge for the transaction.\n   * @param identityPrivateKey Ethereum private key to sign the registration.\n   * @returns Ethereum transaction receipt object.\n   */\n  public async registerIdentity(davId: DavID, walletAddress: string, walletPrivateKey: string, identityPrivateKey: string): Promise<string> {\n    return await Contracts.registerIdentity(davId, identityPrivateKey, walletAddress, walletPrivateKey, this._config);\n  }\n}\n"]}