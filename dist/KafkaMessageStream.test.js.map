{"version":3,"sources":["../src/KafkaMessageStream.test.ts"],"names":[],"mappings":"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","file":"KafkaMessageStream.test.js","sourcesContent":["import KafkaMessageStream, { IKafkaMessage } from './KafkaMessageStream';\nimport { Observable } from './common-types';\nimport typesMap from './drone-delivery/ProtocolTypes';\nimport DroneDeliveryNeedParams from './drone-delivery/NeedParams';\nimport DroneDeliveryMissionParams from './drone-delivery/MissionParams';\n\ndescribe('KafkaMessageStream', () => {\n\n    it('should instantiate', () => {\n        const kafkaStream = Observable.fromObservable(Observable.from([]), '');\n        const message = new KafkaMessageStream(kafkaStream);\n        expect(message).toBeDefined();\n    });\n\n    it('should instantiate filtered stream', () => {\n        const kafkaStream = Observable.fromObservable(Observable.from([]), '');\n        const messageStream = new KafkaMessageStream(kafkaStream);\n        const stream = messageStream.filterType(typesMap, typesMap.messages);\n        expect(stream).toBeDefined();\n    });\n\n    it('should pass message', (done) => {\n        expect.assertions(1);\n        const kafkaMessages: IKafkaMessage[] = [\n            { protocol: 'drone_delivery', type: 'need', contents: '{}' },\n        ];\n        const kafkaStream = Observable.fromObservable(Observable.from(kafkaMessages), '');\n        const messageStream = new KafkaMessageStream(kafkaStream);\n        const stream = messageStream.filterType(typesMap, typesMap.needs);\n        stream.subscribe(\n            (need) => { expect(need).toBeDefined(); },\n            (error) => { fail(error); done(); },\n            () => { done(); });\n    });\n\n    it('should filter message', (done) => {\n        const kafkaMessages: IKafkaMessage[] = [\n            { protocol: 'drone_delivery', type: 'need', contents: '{}' },\n        ];\n        const kafkaStream = Observable.fromObservable(Observable.from(kafkaMessages), '');\n        const messageStream = new KafkaMessageStream(kafkaStream);\n        const stream = messageStream.filterType(typesMap, typesMap.bids);\n        stream.subscribe(\n            (need) => { fail('No message should pass'); done(); },\n            (error) => { fail(error); done(); },\n            () => { done(); });\n    });\n\n    it('should filter first message and pass second when first is not correct type and second is', (done) => {\n        expect.assertions(1);\n        const kafkaMessages: IKafkaMessage[] = [\n            { protocol: 'drone_delivery', type: 'not_need', contents:\n            '{\"id\":\"123\", \"protocol\":\"DroneDelivery\", \"type\":\"Bid\", \"ttl\":\"3000\", \"startAt\":1}' },\n            { protocol: 'drone_delivery', type: 'need', contents:\n            '{\"id\":\"123\", \"protocol\":\"DroneDelivery\", \"type\":\"Bid\", \"ttl\":3000, \"startAt\":2}' },\n        ];\n        const kafkaStream = Observable.fromObservable(Observable.from(kafkaMessages), '');\n        const messageStream = new KafkaMessageStream(kafkaStream);\n        const stream = messageStream.filterType(typesMap, typesMap.needs);\n        const passedMessages: any[] = [];\n        stream.subscribe(\n            (need) => {\n                passedMessages.push(need);\n            },\n            (error) => { fail(error); },\n            () => {\n                const formattedNeedParams = new DroneDeliveryNeedParams();\n                formattedNeedParams.deserialize(JSON.parse('{\"id\":\"123\", \"protocol\":\"DroneDelivery\", \"type\":\"Bid\", \"ttl\":3000, \"startAt\":1}'));\n                expect(passedMessages).toMatchObject([formattedNeedParams]);\n                done();\n            });\n    });\n\n    it('should pass first message and filter second when first is correct type and second is not', (done) => {\n        // expect.assertions(1);\n        const kafkaMessages: IKafkaMessage[] = [\n            { protocol: 'drone_delivery', type: 'need', contents:\n            '{\"id\":\"123\", \"protocol\":\"DroneDelivery\", \"type\":\"Bid\", \"ttl\":3000, \"startAt\":1}' },\n            { protocol: 'drone_delivery', type: 'not_need', contents:\n            '{\"id\":\"123\", \"protocol\":\"DroneDelivery\", \"type\":\"Bid\", \"ttl\":3000, \"startAt\":2}' },\n        ];\n        const kafkaStream = Observable.fromObservable(Observable.from(kafkaMessages), '');\n        const messageStream = new KafkaMessageStream(kafkaStream);\n        const stream = messageStream.filterType(typesMap, typesMap.needs);\n        const passedMessages: any[] = [];\n        stream.subscribe(\n            (need) => {\n                passedMessages.push(need);\n            },\n            (error) => { fail(error); },\n            () => {\n                const formattedNeedParams = new DroneDeliveryNeedParams();\n                formattedNeedParams.deserialize(JSON.parse('{\"id\":\"123\", \"protocol\":\"DroneDelivery\", \"type\":\"Bid\", \"ttl\":3000, \"startAt\":1}'));\n                expect(passedMessages).toEqual([formattedNeedParams]);\n                done();\n            });\n    });\n\n    it('should pass each type to correct stream', (done) => {\n        expect.assertions(2);\n        const kafkaMessages: IKafkaMessage[] = [\n            { protocol: 'drone_delivery', type: 'need', contents: '{\"id\":\"123\", \"protocol\":\"DroneDelivery\", \"type\":\"Bid\", \"ttl\":3000, \"startAt\":1}' },\n            { protocol: 'drone_delivery', type: 'mission', contents:\n            '{\"id\":\"1\",\"price\":{\"type\":\"flat\",\"value\":\"1000\"},\"vehicleId\":\"DAV_ID\",\"neederDavId\":\"abc\",\"protocol\":\"DroneDelivery\",\"type\":\"Mission\",' +\n            ' \"ttl\":3000}' },\n            { protocol: 'drone_delivery', type: 'need', contents: '{\"id\":\"123\", \"protocol\":\"DroneDelivery\", \"type\":\"Bid\", \"ttl\":3000, \"startAt\":2}' },\n            { protocol: 'drone_delivery', type: 'mission', contents:\n            '{\"id\":\"2\",\"price\":{\"type\":\"flat\",\"value\":\"1000\"},\"vehicleId\":\"DAV_ID\",\"neederDavId\":\"abc\",\"protocol\":\"DroneDelivery\",\"type\":\"Mission\",' +\n            ' \"ttl\":3000}' },\n        ];\n        const kafkaStream = Observable.fromObservable(Observable.from(kafkaMessages), '');\n        const messageStream = new KafkaMessageStream(kafkaStream);\n        const streamNeeds = messageStream.filterType(typesMap, typesMap.needs);\n        const streamMissions = messageStream.filterType(typesMap, typesMap.missions);\n\n        const passedNeeds: any[] = [];\n        const passedMissions: any[] = [];\n        let doneNeeds = false;\n        let doneMissions = false;\n\n        const test = () => {\n            if (doneMissions && doneNeeds) {\n                const formattedNeedParams1 = new DroneDeliveryNeedParams();\n                formattedNeedParams1.deserialize(JSON.parse(kafkaMessages[0].contents));\n                const formattedNeedParams2 = new DroneDeliveryNeedParams();\n                formattedNeedParams2.deserialize(JSON.parse(kafkaMessages[2].contents));\n                expect(passedNeeds).toEqual([formattedNeedParams1, formattedNeedParams2]);\n                const expectedMission1 = new DroneDeliveryMissionParams();\n                expectedMission1.deserialize(JSON.parse(kafkaMessages[1].contents));\n                const expectedMission2 = new DroneDeliveryMissionParams();\n                expectedMission2.deserialize(JSON.parse(kafkaMessages[3].contents));\n                expect(passedMissions).toEqual([expectedMission1, expectedMission2]);\n                done();\n            }\n        };\n\n        streamNeeds.subscribe(\n            (need) => {\n                passedNeeds.push(need);\n            },\n            (error) => { fail(error); },\n            () => {\n                doneNeeds = true;\n                test();\n            });\n\n        streamMissions.subscribe(\n            (bid) => {\n                passedMissions.push(bid);\n            },\n            (error) => { fail(error); },\n            () => {\n                doneMissions = true;\n                test();\n            });\n    });\n});\n"]}