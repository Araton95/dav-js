{"version":3,"sources":["../src/BidParams.ts"],"names":[],"mappings":";;AAAA,+CAAwC;AAGxC,mCAA4B;AAC5B,iDAA2C;AAG3C;;GAEG;AACH,eAAwC,SAAQ,qBAAW;IAOvD,YAAmB,QAAgB,EAAE,IAAY,EAAE,MAA4B;QAC3E,IAAI,CAAC,MAAM,EAAE;YACT,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;SACzB;aAAM;YACH,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;gBACf,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;aAChD;YACD,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;gBACnB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;aACpD;YACD,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;YAC9B,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC;YACpB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;YAClC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;YACtC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;YAC/D,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAClF,WAAW,CAAC,GAAG,CAAC,CAAC,KAAsB,EAAU,EAAE;gBAC/C,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC;oBAClC,IAAI,eAAK,CAAC,KAAmB,EAAE,wBAAS,CAAC,IAAI,CAAC,CAAC,CAAC;oBAChD,IAAI,eAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,KAAK,GAAG,WAAuB,CAAC;SACxC;IACL,CAAC;IAEM,SAAS;QACZ,MAAM,eAAe,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QAC1C,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE;YAC3B,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,WAAW,EAAE,IAAI,CAAC,WAAW;SAChC,CAAC,CAAC;QACH,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEM,WAAW,CAAC,IAAS;QACxB,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;IACxC,CAAC;IAEM,MAAM,CAAC,KAAgB;QAC1B,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CACjD,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;aACtD,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC;QACxC,OAAO,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,IAAI,YAAY;eACtC,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS;eAClC,IAAI,CAAC,WAAW,KAAK,KAAK,CAAC,WAAW,CAAC;IAClD,CAAC;CAEJ;AA9DD,4BA8DC","file":"BidParams.js","sourcesContent":["import BasicParams from './BasicParams';\nimport IPrice from './IPrice';\nimport { ID, BigInteger, DavID } from './common-types';\nimport Price from './Price';\nimport { PriceType } from './common-enums';\nimport IBidParams from './IBidParams';\n\n/**\n * @class The abstract Class BidParams represent common parameters of BidParams classes.\n */\nexport default abstract class BidParams extends BasicParams {\n    public id: ID;\n    public price: IPrice[];\n    public vehicleId: DavID;\n    public neederDavId: DavID;\n    public isCommitted: boolean;\n\n    public constructor(protocol: string, type: string, values?: Partial<IBidParams>) {\n        if (!values) {\n            super(protocol, type);\n        } else {\n            if (!values.price) {\n                throw new Error('price is a required field');\n            }\n            if (!values.vehicleId) {\n                throw new Error('vehicleId is a required field');\n            }\n            super(protocol, type, values);\n            this.id = values.id;\n            this.vehicleId = values.vehicleId;\n            this.neederDavId = values.neederDavId;\n            this.isCommitted = values.isCommitted === false ? false : true;\n            const priceObject = values.price instanceof Array ? values.price : [values.price];\n            priceObject.map((price: string | IPrice): IPrice => {\n                return typeof price === 'string' ?\n                new Price(price as BigInteger, PriceType.flat) :\n                new Price(price.value, price.type, price.description);\n            });\n            this.price = priceObject as IPrice[];\n        }\n    }\n\n    public serialize() {\n        const formattedParams = super.serialize();\n        Object.assign(formattedParams, {\n            id: this.id,\n            price: this.price,\n            vehicleId: this.vehicleId,\n            neederDavId: this.neederDavId,\n            isCommitted: this.isCommitted,\n        });\n        return formattedParams;\n    }\n\n    public deserialize(json: any): void {\n        super.deserialize(json);\n        this.id = json.id;\n        this.price = json.price;\n        this.vehicleId = json.vehicleId;\n        this.neederDavId = json.neederDavId;\n        this.isCommitted = json.isCommitted;\n    }\n\n    public equals(other: BidParams): boolean {\n        const isPriceEqual = this.price.map((price, index) =>\n            other.price[index] && price.equals(other.price[index]))\n            .find((x: any) => !x) === undefined;\n        return this.ttl === other.ttl && isPriceEqual\n            && this.vehicleId === other.vehicleId\n            && this.neederDavId === other.neederDavId;\n    }\n\n}\n"]}