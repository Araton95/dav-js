{"version":3,"sources":["../src/BidParams.ts"],"names":[],"mappings":"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","file":"BidParams.js","sourcesContent":["import BasicParams from './BasicParams';\nimport IPrice from './IPrice';\nimport { ID, BigInteger, DavID } from './common-types';\nimport Price from './Price';\nimport { PriceType } from './common-enums';\nimport IBidParams from './IBidParams';\n\n/**\n * @class The abstract Class BidParams represent common parameters of BidParams classes.\n */\nexport default abstract class BidParams extends BasicParams {\n  public id: ID;\n  public price: IPrice[];\n  public vehicleId: DavID;\n  public neederDavId: DavID;\n  public isCommitted: boolean;\n\n  public constructor(\n    protocol: string,\n    type: string,\n    values?: Partial<IBidParams>,\n  ) {\n    if (!values) {\n      super(protocol, type);\n    } else {\n      if (!values.price) {\n        throw new Error('price is a required field');\n      }\n      if (!values.vehicleId) {\n        throw new Error('vehicleId is a required field');\n      }\n      super(protocol, type, values);\n      this.id = values.id;\n      this.vehicleId = values.vehicleId;\n      this.neederDavId = values.neederDavId;\n      this.isCommitted = values.isCommitted === false ? false : true;\n      const priceObject =\n        values.price instanceof Array ? values.price : [values.price];\n      priceObject.map(\n        (price: string | IPrice): IPrice => {\n          return typeof price === 'string'\n            ? new Price(price as BigInteger, PriceType.flat)\n            : new Price(price.value, price.type, price.description);\n        },\n      );\n      this.price = priceObject as IPrice[];\n    }\n  }\n\n  public serialize() {\n    const formattedParams = super.serialize();\n    Object.assign(formattedParams, {\n      id: this.id,\n      price: this.price,\n      vehicleId: this.vehicleId,\n      neederDavId: this.neederDavId,\n      isCommitted: this.isCommitted,\n    });\n    return formattedParams;\n  }\n\n  public deserialize(json: any): void {\n    super.deserialize(json);\n    this.id = json.id;\n    this.price = json.price;\n    this.vehicleId = json.vehicleId;\n    this.neederDavId = json.neederDavId;\n    this.isCommitted = json.isCommitted;\n  }\n\n  public equals(other: BidParams): boolean {\n    const isPriceEqual =\n      this.price\n        .map(\n          (price, index) =>\n            other.price[index] && price.equals(other.price[index]),\n        )\n        .find((x: any) => !x) === undefined;\n    return (\n      this.ttl === other.ttl &&\n      isPriceEqual &&\n      this.vehicleId === other.vehicleId &&\n      this.neederDavId === other.neederDavId\n    );\n  }\n}\n"]}