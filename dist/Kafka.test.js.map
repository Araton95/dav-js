{"version":3,"sources":["../src/Kafka.test.ts"],"names":[],"mappings":";;AAAA,qCAA8B;AAQ9B,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,IAAI,MAAM,GAAY,IAAI,gBAAM,CAAC,EAAE;mEAC4B,CAAE,CAAC,CAAC;IAEnE,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,iFAAiF,EAAE,KAAK,IAAI,EAAE;YAC/F,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC1B,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;YAEhD,MAAM,UAAU,GAAG;gBACjB,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,KAAa,EAAE,EAAO,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC7C,YAAY,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,MAAgB,EAAE,EAAkC,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC/F,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;aACnB,CAAC;YACF,OAAO,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC;YAEvE,MAAM,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;YAE1E,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YACvE,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAClD,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,EAAE,iBAAiB,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnF,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;YAC7E,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC1B,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;YAEhD,MAAM,UAAU,GAAG;gBACjB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;gBAClB,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,KAAa,EAAE,EAAO,EAAE,EAAE;oBACrC,IAAI,KAAK,KAAK,OAAO,EAAE;wBACrB,EAAE,CAAC,gCAAgC,CAAC,CAAC;qBACtC;gBACH,CAAC,CAAC;aACH,CAAC;YACF,OAAO,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC;YAEvE,MAAM,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAChG,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC1B,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;YAEhD,MAAM,UAAU,GAAG,aAAa,CAAC;YACjC,MAAM,UAAU,GAAG;gBACjB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;gBAClB,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,KAAa,EAAE,EAAO,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC7C,YAAY,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,MAAgB,EAAE,EAAkC,EAAE,EAAE,CAAC,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aACtG,CAAC;YACF,OAAO,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC;YAEvE,MAAM,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC1E,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YACvE,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAClD,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,EAAE,iBAAiB,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAEjC,EAAE,CAAC,0FAA0F,EAAE,KAAK,IAAI,EAAE;YACxG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC1B,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;YAChD,MAAM,OAAO,GAAQ;gBACnB,EAAE,EAAE,CAAC;gBACL,KAAK,EAAE,CAAC;gBACR,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC;aAClC,CAAC;YACF,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,CAAc,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YAC7D,MAAM,UAAU,GAAG,IAAI,cAAc,EAAE,CAAC;YAExC,MAAM,UAAU,GAAG;gBACjB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;gBAClB,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,KAAa,EAAE,EAAO,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;aAC9C,CAAC;YACF,MAAM,YAAY,GAAG;gBACnB,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,QAAsD,EAAE,EAAkC,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aAC9H,CAAC;YACF,OAAO,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,CAAC;YACtE,OAAO,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC;YAEvE,MAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;YACrF,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YACvE,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QAChI,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iEAAiE,EAAE,KAAK,IAAI,EAAE;YAC/E,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC1B,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;YAChD,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,CAAc,GAAG,EAAE,CAAC,CAAC;gBACjD,SAAS,EAAE,GAAG,EAAE;oBACd,OAAO,2BAA2B,CAAC;gBACrC,CAAC;aACF,CAAC,CAAC,CAAC;YACJ,MAAM,UAAU,GAAG,IAAI,cAAc,EAAE,CAAC;YAExC,MAAM,UAAU,GAAG;gBACjB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;gBAClB,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,KAAa,EAAE,EAAO,EAAE,EAAE;oBACrC,IAAI,KAAK,KAAK,OAAO,EAAE;wBACrB,EAAE,CAAC,gCAAgC,CAAC,CAAC;qBACtC;gBACH,CAAC,CAAC;aACH,CAAC;YACF,OAAO,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC;YAEvE,MAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAC3G,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC1B,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;YAChD,MAAM,OAAO,GAAQ;gBACnB,EAAE,EAAE,CAAC;gBACL,KAAK,EAAE,CAAC;gBACR,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC;aAClC,CAAC;YACF,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,CAAc,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YAC7D,MAAM,UAAU,GAAG,IAAI,cAAc,EAAE,CAAC;YAExC,MAAM,UAAU,GAAG;gBACjB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;gBAClB,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,KAAa,EAAE,EAAO,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;aAC9C,CAAC;YACF,MAAM,YAAY,GAAG;gBACnB,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,QAAoD,EAAE,EAAkC,EAAE,EAAE,CAAC,EAAE,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;aACrI,CAAC;YACF,OAAO,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC;YACvE,OAAO,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,CAAC;YAEtE,MAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACxF,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YACvE,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC7H,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAE/B,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC1E,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC1B,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;YAEhD,MAAM,eAAe,GAAG;gBACtB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;gBAClB,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,KAAa,EAAE,EAAO,EAAE,EAAE;oBACrC,IAAI,KAAK,KAAK,OAAO,EAAE;wBACrB,EAAE,CAAC,gCAAgC,CAAC,CAAC;qBACtC;gBACH,CAAC,CAAC;aACH,CAAC;YACF,OAAO,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC,CAAC;YAE5E,MAAM,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAC7F,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,0FAA0F,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;YAC7G,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAE1B,MAAM,eAAe,GAAG;gBACtB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;gBAClB,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,KAAa,EAAE,EAAO,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;aAC9C,CAAC;YACF,OAAO,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC,CAAC;YAE5E,MAAM,UAAU,GAAG,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;YAC3E,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;YAC9C,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,GAAG,EAAE,CAAC,CAAC;gBACzC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,aAAwC,EAAE,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;oBAClH,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;oBACvF,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;oBACtE,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,SAAS,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAC3E,IAAI,EAAE,CAAC;oBACP,OAAO,EAAE,CAAC;gBACZ,CAAC,CAAC,CAAC;aACJ,CAAC,CAAC,CAAC;YAEJ,MAAM,YAAY,GAAG;gBACnB,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,KAAa,EAAE,EAAO,EAAE,EAAE;oBACrC,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC;gBAC5C,CAAC,CAAC;aACH,CAAC;YACF,OAAO,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,CAAC;YACtE,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;YAEhD,MAAM,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,yCAAyC,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;YAC5D,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAE1B,MAAM,eAAe,GAAG;gBACtB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;gBAClB,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,KAAa,EAAE,EAAO,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;aAC9C,CAAC;YACF,OAAO,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC,CAAC;YAE5E,MAAM,KAAK,GAAG,OAAO,CAAC;YACtB,MAAM,UAAU,GAAG,eAAe,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,GAAG,EAAE,CAAC,CAAC;gBACzC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,aAAwC,EAAE,EAAE,CAAC,aAAa,CAAC,SAAS,CACzG,CAAC,GAAG,EAAE,EAAE;oBACN,IAAI,EAAE,CAAC;oBACP,IAAI,EAAE,CAAC;gBACT,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;oBACR,MAAM,YAAY,GAAG,KAAK,CAAC,UAAU,CAAC,sCAAsC,CAAC,CAAC;oBAC9E,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAChC,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAC5E,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,SAAS,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAC3E,IAAI,EAAE,CAAC;gBACT,CAAC,CACF,CAAC;aACH,CAAC,CAAC,CAAC;YAEJ,MAAM,YAAY,GAAG;gBACnB,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,KAAa,EAAE,EAAO,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC;aAC1E,CAAC;YACF,OAAO,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,CAAC;YACtE,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;YAEhD,MAAM,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAEtC,SAAS,CAAC,GAAG,EAAE;YACb,MAAM,GAAG,EAAE,WAAW,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC;YACtC,OAAO,CAAC,GAAG,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;YAElC,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;gBACtE,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,GAAW,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC5E,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBAC1B,OAAO,EAAE;wBACP,IAAI,EAAE,QAAQ;qBACf;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;gBAEhD,MAAM,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;gBAC9E,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,uCAAuC,CAAC,CAAC;YACjF,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;gBACjE,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,GAAW,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,EAAE,CAAC,CAAC,CAAC;gBAC5G,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBAC1B,OAAO,EAAE;wBACP,IAAI,EAAE,QAAQ;qBACf;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;gBAEhD,MAAM,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;gBACpF,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,uCAAuC,CAAC,CAAC;YACjF,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;gBAChE,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,GAAW,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,6BAA6B,CAAC,CAAC,CAAC;gBACzF,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBAC1B,OAAO,EAAE;wBACP,IAAI,EAAE,QAAQ;qBACf;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;gBAEhD,MAAM,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;gBACpG,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,uCAAuC,CAAC,CAAC;YACjF,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;YAEjC,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;gBACrE,MAAM,YAAY,GAAQ;oBACxB,EAAE,EAAE,CAAC;oBACL,KAAK,EAAE,CAAC;oBACR,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC;iBACvC,CAAC;gBACF,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,CAAc,GAAG,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBAClE,MAAM,UAAU,GAAG,IAAI,cAAc,EAAE,CAAC;gBAExC,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,GAAW,EAAE,OAAe,EAAE,IAAS,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;gBACxG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBAC1B,OAAO,EAAE;wBACP,IAAI,EAAE,QAAQ;qBACf;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;gBAEhD,MAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;gBACzF,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,wCAAwC,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnI,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;gBAChE,MAAM,YAAY,GAAQ;oBACxB,EAAE,EAAE,CAAC;oBACL,KAAK,EAAE,CAAC;oBACR,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC;iBACvC,CAAC;gBACF,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,CAAc,GAAG,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBAClE,MAAM,UAAU,GAAG,IAAI,cAAc,EAAE,CAAC;gBAExC,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,GAAW,EAAE,IAAS,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,EAAE,CAAC,CAAC,CAAC;gBACvH,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBAC1B,OAAO,EAAE;wBACP,IAAI,EAAE,QAAQ;qBACf;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;gBAEhD,MAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC5F,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,wCAAwC,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnI,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;gBAC/D,MAAM,YAAY,GAAQ;oBACxB,EAAE,EAAE,CAAC;oBACL,KAAK,EAAE,CAAC;oBACR,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC;iBACvC,CAAC;gBACF,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,CAAc,GAAG,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBAClE,MAAM,UAAU,GAAG,IAAI,cAAc,EAAE,CAAC;gBAExC,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,GAAW,EAAE,IAAS,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,6BAA6B,CAAC,CAAC,CAAC;gBACpG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBAC1B,OAAO,EAAE;wBACP,IAAI,EAAE,QAAQ;qBACf;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;gBAEhD,MAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;gBAC5G,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,wCAAwC,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnI,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;YAE/B,EAAE,CAAC,+EAA+E,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;gBACjG,MAAM,UAAU,GAAG,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;gBAC3E,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;gBAE9C,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,GAAW,EAAE,IAAS,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC1G,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBAC1B,OAAO,EAAE;wBACP,GAAG,EAAE,OAAO;qBACb;iBACF,CAAC,CAAC,CAAC;gBAEJ,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,GAAG,EAAE,CAAC,CAAC;oBACzC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,aAAwC,EAAE,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;wBAClH,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;wBACvF,MAAM,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;wBACzC,IAAI,EAAE,CAAC;wBACP,OAAO,EAAE,CAAC;oBACZ,CAAC,CAAC,CAAC;iBACJ,CAAC,CAAC,CAAC;gBAEJ,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;gBAEhD,MAAM,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;YAEH,GAAG,CAAC,gGAAgG,EAAE,KAAK,IAAI,EAAE;gBAC/G,IAAI,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC;gBAC1C,MAAM,UAAU,GAAG,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;gBAC3E,MAAM,gBAAgB,GAAG,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;gBAClF,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC,CAAC;gBAElE,MAAM,kBAAkB,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,eAAuB,EAAE,EAAE,CAAC,gBAAgB,CAAC,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;gBAClH,OAAO,CAAC,4BAA4B,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;gBAE9F,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,GAAW,EAAE,OAAe,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;gBAC9G,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBAC1B,OAAO,EAAE;wBACP,GAAG,EAAE,OAAO;qBACb;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;gBAEhD,MAAM,UAAU,GAA4B,IAAI,CAAC,CAAC,6CAA6C;gBAC/F,MAAM,YAAY,GAAU,EAAE,CAAC;gBAC/B,IAAI,OAAO,GAAG,CAAC,CAAC;gBAChB,MAAM,QAAQ,GAAG,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;oBACrD,UAAU,CAAC,SAAS,CAClB,CAAC,IAAI,EAAE,EAAE;wBACP,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACxB,OAAO,EAAE,CAAC;wBACV,IAAI,OAAO,KAAK,CAAC,EAAE;4BACjB,OAAO,CAAC,YAAY,CAAC,CAAC;yBACvB;oBACH,CAAC,EACD,CAAC,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CACzB,CAAC;gBACJ,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC,CAAC;gBACzD,MAAM,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC,wCAAwC,CAAC,CAAC;YACjF,CAAC,CAAC,CAAC;YAEH,GAAG,CAAC,iGAAiG,EAAE,KAAK,IAAI,EAAE;gBAChH,IAAI,CAAC,aAAa,EAAE,CAAC;gBACrB,IAAI,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC;gBAC1C,MAAM,UAAU,GAAG,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;gBAC3E,MAAM,gBAAgB,GAAG,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;gBAClF,MAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAC5D,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBAEhD,MAAM,kBAAkB,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,eAAuB,EAAE,EAAE,CAAC,gBAAgB,CAAC,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;gBAClH,OAAO,CAAC,4BAA4B,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;gBAE9F,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,GAAW,EAAE,OAAe,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC,CAAC;qBAChH,mBAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;gBAC3E,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBAC1B,OAAO,EAAE;wBACP,GAAG,EAAE,OAAO;qBACb;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;gBAEhD,MAAM,UAAU,GAA4B,IAAI,CAAC,CAAC,iDAAiD;gBACnG,MAAM,YAAY,GAAU,EAAE,CAAC;gBAC/B,IAAI,OAAO,GAAG,CAAC,CAAC;gBAChB,MAAM,QAAQ,GAAG,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;oBACrD,UAAU,CAAC,SAAS,CAClB,CAAC,IAAI,EAAE,EAAE;wBACP,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACxB,OAAO,EAAE,CAAC;wBACV,IAAI,OAAO,KAAK,CAAC,EAAE;4BACjB,OAAO,CAAC,YAAY,CAAC,CAAC;yBACvB;oBACH,CAAC,EACD,CAAC,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CACzB,CAAC;gBACJ,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC,CAAC;gBACzD,MAAM,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC,wCAAwC,CAAC,CAAC;gBAC/E,MAAM,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;gBAC3D,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,GAAG,EAAE,CAAC,CAAC;oBACzC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,aAAwC,EAAE,EAAE,CAAC,aAAa,CAAC,SAAS,CACzG,CAAC,GAAG,EAAE,EAAE;wBACN,IAAI,EAAE,CAAC;wBACP,IAAI,EAAE,CAAC;oBACT,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;wBACR,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;wBAClD,IAAI,EAAE,CAAC;oBACT,CAAC,CACF,CAAC;iBACH,CAAC,CAAC,CAAC;gBAEJ,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,GAAW,EAAE,OAAe,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,6BAA6B,CAAC,CAAC,CAAC;gBACzG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBAC1B,OAAO,EAAE;wBACP,GAAG,EAAE,OAAO;qBACb;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;gBAEhD,MAAM,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;gBAEnE,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,GAAG,EAAE,CAAC,CAAC;oBACzC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,aAAwC,EAAE,EAAE,CAAC,aAAa,CAAC,SAAS,CACzG,CAAC,GAAG,EAAE,EAAE;wBACN,IAAI,EAAE,CAAC;wBACP,IAAI,EAAE,CAAC;oBACT,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;wBACR,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;wBACrC,IAAI,EAAE,CAAC;oBACT,CAAC,CACF,CAAC;iBACH,CAAC,CAAC,CAAC;gBAEJ,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,GAAW,EAAE,OAAe,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC,CAAC;gBAC/H,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBAC1B,OAAO,EAAE;wBACP,GAAG,EAAE,OAAO;qBACb;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,KAAK,GAAG,CAAC,2CAAa,SAAS,EAAC,CAAC,CAAC,OAAO,CAAC;gBAEhD,MAAM,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"Kafka.test.js","sourcesContent":["import Config from './Config';\nimport IConfig from './IConfig';\nimport BasicParams from './BasicParams';\nimport { Observable } from './common-types';\nimport KafkaMessageStream, { IKafkaMessage } from './KafkaMessageStream';\nimport BidParams from './BidParams';\nimport DroneChargingBidParams from './drone-charging/BidParams';\n\ndescribe('Kafka class', () => {\n  let config: IConfig = new Config({ /*kafkaBrowserPollingInterval: 3000, kafkaBrowserRequestTimeout: 1000,\n  kafkaSeedUrls: ['localhost:9092'], apiSeedUrls: ['localhost']*/ });\n\n  beforeEach(() => {\n    jest.resetAllMocks();\n    jest.resetModules();\n    jest.useFakeTimers();\n  });\n\n  describe('createTopic method', () => {\n    it('should create topic without errors when input is valid and no errors from kafka', async () => {\n      jest.doMock('kafka-node');\n      const kafka = (await import('./Kafka')).default;\n\n      const clientMock = {\n        on: jest.fn((state: string, cb: any) => cb()),\n        createTopics: jest.fn((topics: string[], cb: (error: any, data: any) => any) => cb(null, null)),\n        connect: jest.fn(),\n      };\n      require('kafka-node').KafkaClient.mockImplementation(() => clientMock);\n\n      await expect(kafka.createTopic('topic', config)).resolves.toBeUndefined();\n\n      expect(clientMock.on).toHaveBeenCalledWith('ready', expect.anything());\n      expect(clientMock.createTopics).toHaveBeenCalledWith(\n        [{ topic: 'topic', partitions: 1, replicationFactor: 1 }], expect.any(Function));\n      expect(clientMock.connect).toHaveBeenCalledTimes(1);\n    });\n\n    it('should get error from client while trying to connect to kafka', async () => {\n      jest.doMock('kafka-node');\n      const kafka = (await import('./Kafka')).default;\n\n      const clientMock = {\n        connect: jest.fn(),\n        on: jest.fn((state: string, cb: any) => {\n          if (state === 'error') {\n            cb('Client got error in connection');\n          }\n        }),\n      };\n      require('kafka-node').KafkaClient.mockImplementation(() => clientMock);\n\n      await expect(kafka.createTopic('topic', config)).rejects.toBe('Client got error in connection');\n      expect(clientMock.on).toHaveBeenCalledWith('error', expect.anything());\n    });\n\n    it('should get error from kafka in topic creation method', async () => {\n      jest.doMock('kafka-node');\n      const kafka = (await import('./Kafka')).default;\n\n      const kafkaError = 'kafka error';\n      const clientMock = {\n        connect: jest.fn(),\n        on: jest.fn((state: string, cb: any) => cb()),\n        createTopics: jest.fn((topics: string[], cb: (error: any, data: any) => any) => cb(kafkaError, null)),\n      };\n      require('kafka-node').KafkaClient.mockImplementation(() => clientMock);\n\n      await expect(kafka.createTopic('topic', config)).rejects.toBe(kafkaError);\n      expect(clientMock.on).toHaveBeenCalledWith('ready', expect.anything());\n      expect(clientMock.createTopics).toHaveBeenCalledWith(\n        [{ topic: 'topic', partitions: 1, replicationFactor: 1 }], expect.any(Function));\n    });\n  });\n\n  describe('sendParams method', () => {\n\n    it('should send message to kafka without errors when input is valid and no errors from kafka', async () => {\n      jest.doMock('kafka-node');\n      const kafka = (await import('./Kafka')).default;\n      const content: any = {\n        id: 1,\n        price: 3,\n        serialize: jest.fn(() => content),\n      };\n      const paramsMockType = jest.fn<BasicParams>(() => (content));\n      const paramsMock = new paramsMockType();\n\n      const clientMock = {\n        connect: jest.fn(),\n        on: jest.fn((state: string, cb: any) => cb()),\n      };\n      const producerMock = {\n        send: jest.fn((payloads: Array<{ 'topic': string, messages: string }>, cb: (error: any, data: any) => any) => cb(null, null)),\n      };\n      require('kafka-node').Producer.mockImplementation(() => producerMock);\n      require('kafka-node').KafkaClient.mockImplementation(() => clientMock);\n\n      await expect(kafka.sendParams('topic', paramsMock, config)).resolves.toBeUndefined();\n      expect(clientMock.on).toHaveBeenCalledWith('ready', expect.anything());\n      expect(producerMock.send).toHaveBeenCalledWith([{ topic: 'topic', messages: JSON.stringify(content) }], expect.any(Function));\n    });\n\n    it('should get error from producer while trying to connect to kafka', async () => {\n      jest.doMock('kafka-node');\n      const kafka = (await import('./Kafka')).default;\n      const paramsMockType = jest.fn<BasicParams>(() => ({\n        serialize: () => {\n          return 'basic params mock content';\n        },\n      }));\n      const paramsMock = new paramsMockType();\n\n      const clientMock = {\n        connect: jest.fn(),\n        on: jest.fn((state: string, cb: any) => {\n          if (state === 'error') {\n            cb('Client got error in connection');\n          }\n        }),\n      };\n      require('kafka-node').KafkaClient.mockImplementation(() => clientMock);\n\n      await expect(kafka.sendParams('topic', paramsMock, config)).rejects.toBe('Client got error in connection');\n      expect(clientMock.on).toHaveBeenCalledWith('error', expect.anything());\n    });\n\n    it('should get error from kafka in send method', async () => {\n      jest.doMock('kafka-node');\n      const kafka = (await import('./Kafka')).default;\n      const content: any = {\n        id: 1,\n        price: 3,\n        serialize: jest.fn(() => content),\n      };\n      const paramsMockType = jest.fn<BasicParams>(() => (content));\n      const paramsMock = new paramsMockType();\n\n      const clientMock = {\n        connect: jest.fn(),\n        on: jest.fn((state: string, cb: any) => cb()),\n      };\n      const producerMock = {\n        send: jest.fn((payloads: Array<{ topic: string, messages: string }>, cb: (error: any, data: any) => any) => cb('kafka error', null)),\n      };\n      require('kafka-node').KafkaClient.mockImplementation(() => clientMock);\n      require('kafka-node').Producer.mockImplementation(() => producerMock);\n\n      await expect(kafka.sendParams('topic', paramsMock, config)).rejects.toBe('kafka error');\n      expect(clientMock.on).toHaveBeenCalledWith('ready', expect.anything());\n      expect(producerMock.send).toHaveBeenCalledWith([{ topic: 'topic', messages: JSON.stringify(content) }], expect.anything());\n    });\n  });\n\n  describe('messages method', () => {\n\n    it('should get error from kafka client while trying to connect', async () => {\n      jest.doMock('kafka-node');\n      const kafka = (await import('./Kafka')).default;\n\n      const kafkaClientMock = {\n        connect: jest.fn(),\n        on: jest.fn((state: string, cb: any) => {\n          if (state === 'error') {\n            cb('client got error in connection');\n          }\n        }),\n      };\n      require('kafka-node').KafkaClient.mockImplementation(() => kafkaClientMock);\n\n      await expect(kafka.messages('topic', config)).rejects.toBe('client got error in connection');\n      expect(kafkaClientMock.on).toHaveBeenCalledWith('error', expect.anything());\n    });\n\n    xit('should get message stream with one message when get valid input and no errors from kafka', async (done) => {\n      jest.doMock('kafka-node');\n\n      const kafkaClientMock = {\n        connect: jest.fn(),\n        on: jest.fn((state: string, cb: any) => cb()),\n      };\n      require('kafka-node').KafkaClient.mockImplementation(() => kafkaClientMock);\n\n      const jsonObject = { protocol: 'drone-charging', type: 'bid', price: '3' };\n      const jsonString = JSON.stringify(jsonObject);\n      jest.doMock('./KafkaMessageStream', () => ({\n        default: jest.fn().mockImplementation((messageStream: Observable<IKafkaMessage>) => messageStream.subscribe((bid) => {\n          expect(bid).toEqual({ type: 'bid', protocol: 'drone-charging', contents: jsonString });\n          expect(kafkaClientMock.on).toBeCalledWith('ready', expect.anything());\n          expect(consumerMock.on).toHaveBeenCalledWith('message', expect.anything());\n          done();\n          return {};\n        })),\n      }));\n\n      const consumerMock = {\n        on: jest.fn((state: string, cb: any) => {\n          cb({ topic: 'topic', value: jsonString });\n        }),\n      };\n      require('kafka-node').Consumer.mockImplementation(() => consumerMock);\n      const kafka = (await import('./Kafka')).default;\n\n      await kafka.messages('topic', config);\n    });\n\n    xit('should throw error due to parsing error', async (done) => {\n      jest.doMock('kafka-node');\n\n      const kafkaClientMock = {\n        connect: jest.fn(),\n        on: jest.fn((state: string, cb: any) => cb()),\n      };\n      require('kafka-node').KafkaClient.mockImplementation(() => kafkaClientMock);\n\n      const topic = 'topic';\n      const jsonString = '{bad format}}';\n      jest.doMock('./KafkaMessageStream', () => ({\n        default: jest.fn().mockImplementation((messageStream: Observable<IKafkaMessage>) => messageStream.subscribe(\n          (bid) => {\n            fail();\n            done();\n          },\n          (error) => {\n            const correctError = error.startsWith('error while trying to parse message.');\n            expect(correctError).toBe(true);\n            expect(kafkaClientMock.on).toHaveBeenCalledWith('ready', expect.anything());\n            expect(consumerMock.on).toHaveBeenCalledWith('message', expect.anything());\n            done();\n          },\n        )),\n      }));\n\n      const consumerMock = {\n        on: jest.fn((state: string, cb: any) => cb({ topic, value: jsonString })),\n      };\n      require('kafka-node').Consumer.mockImplementation(() => consumerMock);\n      const kafka = (await import('./Kafka')).default;\n\n      await kafka.messages(topic, config);\n    });\n  });\n\n  describe('browser implementation', () => {\n\n    beforeAll(() => {\n      config = { apiSeedUrls: ['testUrl'] };\n      process.env = { BROWSER: 'true' };\n    });\n\n    beforeEach(() => {\n      jest.resetModules();\n      jest.resetAllMocks();\n    });\n\n    describe('createTopic method', () => {\n\n      it('should create topic without errors when input is valid', async () => {\n        const postMock = jest.fn((url: string) => Promise.resolve({ status: 200 }));\n        jest.doMock('axios', () => ({\n          default: {\n            post: postMock,\n          },\n        }));\n        const kafka = (await import('./Kafka')).default;\n\n        await expect(kafka.createTopic('testTopic', config)).resolves.toBeUndefined();\n        expect(postMock).toHaveBeenCalledWith('http://testUrl/topic/create/testTopic');\n      });\n\n      it('should fail to create topic due to error from api', async () => {\n        const postMock = jest.fn((url: string) => Promise.resolve({ status: 500, data: { error: 'kafka error' } }));\n        jest.doMock('axios', () => ({\n          default: {\n            post: postMock,\n          },\n        }));\n        const kafka = (await import('./Kafka')).default;\n\n        await expect(kafka.createTopic('testTopic', config)).rejects.toEqual('kafka error');\n        expect(postMock).toHaveBeenCalledWith('http://testUrl/topic/create/testTopic');\n      });\n\n      it('should fail to create topic due to network error', async () => {\n        const postMock = jest.fn((url: string) => Promise.reject('net::ERR_CONNECTION_REFUSED'));\n        jest.doMock('axios', () => ({\n          default: {\n            post: postMock,\n          },\n        }));\n        const kafka = (await import('./Kafka')).default;\n\n        await expect(kafka.createTopic('testTopic', config)).rejects.toEqual('net::ERR_CONNECTION_REFUSED');\n        expect(postMock).toHaveBeenCalledWith('http://testUrl/topic/create/testTopic');\n      });\n    });\n\n    describe('sendParams method', () => {\n\n      it('should send params without errors when input is valid', async () => {\n        const paramsObject: any = {\n          id: 1,\n          price: 3,\n          serialize: jest.fn(() => paramsObject),\n        };\n        const paramsMockType = jest.fn<BasicParams>(() => (paramsObject));\n        const paramsMock = new paramsMockType();\n\n        const postMock = jest.fn((url: string, content: string, conf: any) => Promise.resolve({ status: 200 }));\n        jest.doMock('axios', () => ({\n          default: {\n            post: postMock,\n          },\n        }));\n        const kafka = (await import('./Kafka')).default;\n\n        await expect(kafka.sendParams('testTopic', paramsMock, config)).resolves.toBeUndefined();\n        expect(postMock).toHaveBeenCalledWith('http://testUrl/topic/publish/testTopic', JSON.stringify(paramsObject), expect.anything());\n      });\n\n      it('should fail to send params due to error from api', async () => {\n        const paramsObject: any = {\n          id: 1,\n          price: 3,\n          serialize: jest.fn(() => paramsObject),\n        };\n        const paramsMockType = jest.fn<BasicParams>(() => (paramsObject));\n        const paramsMock = new paramsMockType();\n\n        const postMock = jest.fn((url: string, conf: any) => Promise.resolve({ status: 500, data: { error: 'kafka error' } }));\n        jest.doMock('axios', () => ({\n          default: {\n            post: postMock,\n          },\n        }));\n        const kafka = (await import('./Kafka')).default;\n\n        await expect(kafka.sendParams('testTopic', paramsMock, config)).rejects.toBe('kafka error');\n        expect(postMock).toHaveBeenCalledWith('http://testUrl/topic/publish/testTopic', JSON.stringify(paramsObject), expect.anything());\n      });\n\n      it('should fail to send params due to network error', async () => {\n        const paramsObject: any = {\n          id: 1,\n          price: 3,\n          serialize: jest.fn(() => paramsObject),\n        };\n        const paramsMockType = jest.fn<BasicParams>(() => (paramsObject));\n        const paramsMock = new paramsMockType();\n\n        const postMock = jest.fn((url: string, conf: any) => Promise.reject('net::ERR_CONNECTION_REFUSED'));\n        jest.doMock('axios', () => ({\n          default: {\n            post: postMock,\n          },\n        }));\n        const kafka = (await import('./Kafka')).default;\n\n        await expect(kafka.sendParams('testTopic', paramsMock, config)).rejects.toBe('net::ERR_CONNECTION_REFUSED');\n        expect(postMock).toHaveBeenCalledWith('http://testUrl/topic/publish/testTopic', JSON.stringify(paramsObject), expect.anything());\n      });\n    });\n\n    describe('messages method', () => {\n\n      it('should get message stream with one message when get valid input and no errors', async (done) => {\n        const jsonObject = { protocol: 'drone-charging', type: 'bid', price: '3' };\n        const jsonString = JSON.stringify(jsonObject);\n\n        const getMock = jest.fn((url: string, conf: any) => Promise.resolve({ status: 200, data: [jsonString] }));\n        jest.doMock('axios', () => ({\n          default: {\n            get: getMock,\n          },\n        }));\n\n        jest.doMock('./KafkaMessageStream', () => ({\n          default: jest.fn().mockImplementation((messageStream: Observable<IKafkaMessage>) => messageStream.subscribe((bid) => {\n            expect(bid).toEqual({ type: 'bid', protocol: 'drone-charging', contents: jsonString });\n            expect(getMock).toHaveBeenCalledTimes(1);\n            done();\n            return {};\n          })),\n        }));\n\n        const kafka = (await import('./Kafka')).default;\n\n        await kafka.messages('testTopic', config);\n      });\n\n      xit('should get message stream with two messages in one get call when get valid input and no errors', async () => {\n        jest.doMock('./drone-charging/BidParams');\n        const jsonObject = { protocol: 'drone-charging', type: 'bid', price: '3' };\n        const secondJsonObject = { protocol: 'drone-charging', type: 'bid', price: '62' };\n        const jsonString = JSON.stringify([jsonObject, secondJsonObject]);\n\n        const fromJsonVerifiable = jest.fn((jsonStringParam: string) => secondJsonObject).mockReturnValueOnce(jsonObject);\n        require('./drone-charging/BidParams').default.fromJson.mockImplementation(fromJsonVerifiable);\n\n        const getMock = jest.fn((url: string, content: string) => Promise.resolve({ status: 200, data: jsonString }));\n        jest.doMock('axios', () => ({\n          default: {\n            get: getMock,\n          },\n        }));\n        const kafka = (await import('./Kafka')).default;\n\n        const observable: Observable<BasicParams> = null; // await kafka.messages('testTopic', config);\n        const messageArray: any[] = [];\n        let counter = 0;\n        const messages = await new Promise((resolve, reject) => {\n          observable.subscribe(\n            (next) => {\n              messageArray.push(next);\n              counter++;\n              if (counter === 2) {\n                resolve(messageArray);\n              }\n            },\n            (error) => reject(error),\n          );\n        });\n        expect(messages).toEqual([jsonObject, secondJsonObject]);\n        expect(getMock).toHaveBeenCalledWith('http://testUrl/topic/consume/testTopic');\n      });\n\n      xit('should get message stream with two messages in two get calls when get valid input and no errors', async () => {\n        jest.useRealTimers();\n        jest.doMock('./drone-charging/BidParams');\n        const jsonObject = { protocol: 'drone-charging', type: 'bid', price: '3' };\n        const secondJsonObject = { protocol: 'drone-charging', type: 'bid', price: '62' };\n        const secondJsonString = JSON.stringify([secondJsonObject]);\n        const jsonString = JSON.stringify([jsonObject]);\n\n        const fromJsonVerifiable = jest.fn((jsonStringParam: string) => secondJsonObject).mockReturnValueOnce(jsonObject);\n        require('./drone-charging/BidParams').default.fromJson.mockImplementation(fromJsonVerifiable);\n\n        const getMock = jest.fn((url: string, content: string) => Promise.resolve({ status: 200, data: secondJsonString }))\n          .mockReturnValueOnce(Promise.resolve({ status: 200, data: jsonString }));\n        jest.doMock('axios', () => ({\n          default: {\n            get: getMock,\n          },\n        }));\n        const kafka = (await import('./Kafka')).default;\n\n        const observable: Observable<BasicParams> = null; // await kafka.paramsStream('testTopic', config);\n        const messageArray: any[] = [];\n        let counter = 0;\n        const messages = await new Promise((resolve, reject) => {\n          observable.subscribe(\n            (next) => {\n              messageArray.push(next);\n              counter++;\n              if (counter === 2) {\n                resolve(messageArray);\n              }\n            },\n            (error) => reject(error),\n          );\n        });\n        expect(messages).toEqual([jsonObject, secondJsonObject]);\n        expect(getMock).toHaveBeenCalledWith('http://testUrl/topic/consume/testTopic');\n        expect(getMock).toHaveBeenCalledTimes(2);\n      });\n\n      it('should throw error due to network error', async (done) => {\n        jest.doMock('./KafkaMessageStream', () => ({\n          default: jest.fn().mockImplementation((messageStream: Observable<IKafkaMessage>) => messageStream.subscribe(\n            (bid) => {\n              fail();\n              done();\n            },\n            (error) => {\n              expect(error).toBe('net::ERR_CONNECTION_REFUSED');\n              done();\n            },\n          )),\n        }));\n\n        const getMock = jest.fn((url: string, content: string) => Promise.reject('net::ERR_CONNECTION_REFUSED'));\n        jest.doMock('axios', () => ({\n          default: {\n            get: getMock,\n          },\n        }));\n        const kafka = (await import('./Kafka')).default;\n\n        await kafka.messages('testTopic', config);\n      });\n\n      it('should throw error due to bad response from api', async (done) => {\n\n        jest.doMock('./KafkaMessageStream', () => ({\n          default: jest.fn().mockImplementation((messageStream: Observable<IKafkaMessage>) => messageStream.subscribe(\n            (bid) => {\n              fail();\n              done();\n            },\n            (error) => {\n              expect(error).toBe('internal error');\n              done();\n            },\n          )),\n        }));\n\n        const getMock = jest.fn((url: string, content: string) => Promise.resolve({ status: 500, data: { error: 'internal error' } }));\n        jest.doMock('axios', () => ({\n          default: {\n            get: getMock,\n          },\n        }));\n        const kafka = (await import('./Kafka')).default;\n\n        await kafka.messages('testTopic', config);\n      });\n    });\n  });\n});\n"]}