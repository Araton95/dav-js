{"version":3,"sources":["../src/retryPromise.ts"],"names":[],"mappings":";;AAAA,+BAA+B;AAE/B,sBACE,cAAsD,EACtD,OAAgC;IAEhC,OAAO,IAAI,OAAO,CAAI,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;QAC9C,OAAO,mBACL,OAAO,EAAE,EAAE,EACX,UAAU,EAAE,IAAI,EAChB,UAAU,EAAE,KAAK,EACjB,OAAO,EAAE,KAAK,EACd,MAAM,EAAE,GAAG,EACX,SAAS,EAAE,IAAI,IACZ,OAAO,CACX,CAAC;QACF,MAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC3C,SAAS,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;YACjC,cAAc,CAAC,cAAc,CAAC,CAAC,IAAI,CACjC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,EACf,GAAG,CAAC,EAAE;gBACJ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;oBACzB,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC;iBAC/B;YACH,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AA1BD,oCA0BC","file":"retryPromise.js","sourcesContent":["import * as retry from 'retry';\n\nexport function retryPromise<T>(\n  promiseFactory: (currentAttempt: number) => Promise<T>,\n  options?: retry.OperationOptions,\n): Promise<T> {\n  return new Promise<T>(async (resolve, reject) => {\n    options = {\n      retries: 10,\n      minTimeout: 1000,\n      maxTimeout: 20000,\n      forever: false,\n      factor: 2.0,\n      randomize: true,\n      ...options,\n    };\n    const operation = retry.operation(options);\n    operation.attempt(currentAttempt => {\n      promiseFactory(currentAttempt).then(\n        t => resolve(t),\n        err => {\n          if (!operation.retry(err)) {\n            reject(operation.mainError());\n          }\n        },\n      );\n    });\n  });\n}\n"]}