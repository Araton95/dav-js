{"version":3,"sources":["../src/retryPromise.ts"],"names":[],"mappings":";;AAAA,+BAA+B;AAE/B,sBACE,OAAmB,EACnB,OAAgC;IAEhC,OAAO,IAAI,OAAO,CAAI,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;QAC9C,MAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC3C,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE;YACrB,OAAO,CAAC,IAAI,CACV,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,EACf,GAAG,CAAC,EAAE;gBACJ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;oBACzB,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC;iBAC/B;YACH,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAjBD,oCAiBC","file":"retryPromise.js","sourcesContent":["import * as retry from 'retry';\n\nexport function retryPromise<T>(\n  promise: Promise<T>,\n  options?: retry.OperationOptions,\n): Promise<T> {\n  return new Promise<T>(async (resolve, reject) => {\n    const operation = retry.operation(options);\n    operation.attempt(() => {\n      promise.then(\n        t => resolve(t),\n        err => {\n          if (!operation.retry(err)) {\n            reject(operation.mainError());\n          }\n        },\n      );\n    });\n  });\n}\n"]}